// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package clientmsg is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Ping
	Pong
	Req_ServerTime
	Rlt_ServerTime
	Req_Register
	Rlt_Register
	Req_ServerList
	Rlt_ServerList
	Req_Login
	Rlt_Login
	Req_SetCharName
	Rlt_SetCharName
	Req_Match
	Rlt_Match
	Transfer_Team_Operate
	Rlt_NotifyBattleAddress
	Req_ConnectBS
	Rlt_ConnectBS
	Rlt_StartBattle
	Transfer_Command
	Req_EndBattle
	Rlt_EndBattle
	Transfer_Loading_Progress
*/
package clientmsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MessageType int32

const (
	MessageType_MT_PING                      MessageType = 0
	MessageType_MT_PONG                      MessageType = 1
	MessageType_MT_REQ_SERVERTIME            MessageType = 2
	MessageType_MT_RLT_SERVERTIME            MessageType = 3
	MessageType_MT_REQ_REGISTER              MessageType = 4
	MessageType_MT_RLT_REGISTER              MessageType = 5
	MessageType_MT_REQ_SERVERLIST            MessageType = 6
	MessageType_MT_RLT_SERVERLIST            MessageType = 7
	MessageType_MT_REQ_LOGIN                 MessageType = 8
	MessageType_MT_RLT_LOGIN                 MessageType = 9
	MessageType_MT_REQ_SETCHARNAME           MessageType = 10
	MessageType_MT_RLT_SETCHARNAME           MessageType = 11
	MessageType_MT_REQ_MATCH                 MessageType = 12
	MessageType_MT_RLT_MATCH                 MessageType = 13
	MessageType_MT_RLT_NOTIFYBATTLEADDRESS   MessageType = 14
	MessageType_MT_REQ_CONNECTBS             MessageType = 15
	MessageType_MT_RLT_CONNECTBS             MessageType = 16
	MessageType_MT_RLT_STARTBATTLE           MessageType = 17
	MessageType_MT_REQ_ENDBATTLE             MessageType = 18
	MessageType_MT_RLT_ENDBATTLE             MessageType = 19
	MessageType_MT_TRANSFER_COMMAND          MessageType = 20
	MessageType_MT_TRANSFER_LOADING_PROGRESS MessageType = 21
	MessageType_MT_TRANSFER_TEAMOPERATE      MessageType = 22
)

var MessageType_name = map[int32]string{
	0:  "MT_PING",
	1:  "MT_PONG",
	2:  "MT_REQ_SERVERTIME",
	3:  "MT_RLT_SERVERTIME",
	4:  "MT_REQ_REGISTER",
	5:  "MT_RLT_REGISTER",
	6:  "MT_REQ_SERVERLIST",
	7:  "MT_RLT_SERVERLIST",
	8:  "MT_REQ_LOGIN",
	9:  "MT_RLT_LOGIN",
	10: "MT_REQ_SETCHARNAME",
	11: "MT_RLT_SETCHARNAME",
	12: "MT_REQ_MATCH",
	13: "MT_RLT_MATCH",
	14: "MT_RLT_NOTIFYBATTLEADDRESS",
	15: "MT_REQ_CONNECTBS",
	16: "MT_RLT_CONNECTBS",
	17: "MT_RLT_STARTBATTLE",
	18: "MT_REQ_ENDBATTLE",
	19: "MT_RLT_ENDBATTLE",
	20: "MT_TRANSFER_COMMAND",
	21: "MT_TRANSFER_LOADING_PROGRESS",
	22: "MT_TRANSFER_TEAMOPERATE",
}
var MessageType_value = map[string]int32{
	"MT_PING":                      0,
	"MT_PONG":                      1,
	"MT_REQ_SERVERTIME":            2,
	"MT_RLT_SERVERTIME":            3,
	"MT_REQ_REGISTER":              4,
	"MT_RLT_REGISTER":              5,
	"MT_REQ_SERVERLIST":            6,
	"MT_RLT_SERVERLIST":            7,
	"MT_REQ_LOGIN":                 8,
	"MT_RLT_LOGIN":                 9,
	"MT_REQ_SETCHARNAME":           10,
	"MT_RLT_SETCHARNAME":           11,
	"MT_REQ_MATCH":                 12,
	"MT_RLT_MATCH":                 13,
	"MT_RLT_NOTIFYBATTLEADDRESS":   14,
	"MT_REQ_CONNECTBS":             15,
	"MT_RLT_CONNECTBS":             16,
	"MT_RLT_STARTBATTLE":           17,
	"MT_REQ_ENDBATTLE":             18,
	"MT_RLT_ENDBATTLE":             19,
	"MT_TRANSFER_COMMAND":          20,
	"MT_TRANSFER_LOADING_PROGRESS": 21,
	"MT_TRANSFER_TEAMOPERATE":      22,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Type_LoginRetCode int32

const (
	Type_LoginRetCode_LRC_OK                Type_LoginRetCode = 0
	Type_LoginRetCode_LRC_ACCOUNT_EXIST     Type_LoginRetCode = 1
	Type_LoginRetCode_LRC_ACCOUNT_NOT_EXIST Type_LoginRetCode = 2
	Type_LoginRetCode_LRC_PASSWORD_ERROR    Type_LoginRetCode = 3
	Type_LoginRetCode_LRC_OTHER             Type_LoginRetCode = 100
)

var Type_LoginRetCode_name = map[int32]string{
	0:   "LRC_OK",
	1:   "LRC_ACCOUNT_EXIST",
	2:   "LRC_ACCOUNT_NOT_EXIST",
	3:   "LRC_PASSWORD_ERROR",
	100: "LRC_OTHER",
}
var Type_LoginRetCode_value = map[string]int32{
	"LRC_OK":                0,
	"LRC_ACCOUNT_EXIST":     1,
	"LRC_ACCOUNT_NOT_EXIST": 2,
	"LRC_PASSWORD_ERROR":    3,
	"LRC_OTHER":             100,
}

func (x Type_LoginRetCode) String() string {
	return proto.EnumName(Type_LoginRetCode_name, int32(x))
}
func (Type_LoginRetCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Type_GameRetCode int32

const (
	Type_GameRetCode_GRC_OK                  Type_GameRetCode = 0
	Type_GameRetCode_GRC_NAME_NOT_VALID      Type_GameRetCode = 1
	Type_GameRetCode_GRC_MATCH_OK            Type_GameRetCode = 10
	Type_GameRetCode_GRC_MATCH_CONFIRM       Type_GameRetCode = 11
	Type_GameRetCode_GRC_MATCH_ALL_CONFIRMED Type_GameRetCode = 12
	Type_GameRetCode_GRC_MATCH_ERROR         Type_GameRetCode = 13
	Type_GameRetCode_GRC_OTHER               Type_GameRetCode = 100
)

var Type_GameRetCode_name = map[int32]string{
	0:   "GRC_OK",
	1:   "GRC_NAME_NOT_VALID",
	10:  "GRC_MATCH_OK",
	11:  "GRC_MATCH_CONFIRM",
	12:  "GRC_MATCH_ALL_CONFIRMED",
	13:  "GRC_MATCH_ERROR",
	100: "GRC_OTHER",
}
var Type_GameRetCode_value = map[string]int32{
	"GRC_OK":                  0,
	"GRC_NAME_NOT_VALID":      1,
	"GRC_MATCH_OK":            10,
	"GRC_MATCH_CONFIRM":       11,
	"GRC_MATCH_ALL_CONFIRMED": 12,
	"GRC_MATCH_ERROR":         13,
	"GRC_OTHER":               100,
}

func (x Type_GameRetCode) String() string {
	return proto.EnumName(Type_GameRetCode_name, int32(x))
}
func (Type_GameRetCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type MatchActionType int32

const (
	MatchActionType_MAT_JOIN    MatchActionType = 0
	MatchActionType_MAT_CANCEL  MatchActionType = 1
	MatchActionType_MAT_CONFIRM MatchActionType = 2
)

var MatchActionType_name = map[int32]string{
	0: "MAT_JOIN",
	1: "MAT_CANCEL",
	2: "MAT_CONFIRM",
}
var MatchActionType_value = map[string]int32{
	"MAT_JOIN":    0,
	"MAT_CANCEL":  1,
	"MAT_CONFIRM": 2,
}

func (x MatchActionType) String() string {
	return proto.EnumName(MatchActionType_name, int32(x))
}
func (MatchActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type MatchModeType int32

const (
	MatchModeType_MMT_NORMAL MatchModeType = 0
	MatchModeType_MMT_RANK   MatchModeType = 1
)

var MatchModeType_name = map[int32]string{
	0: "MMT_NORMAL",
	1: "MMT_RANK",
}
var MatchModeType_value = map[string]int32{
	"MMT_NORMAL": 0,
	"MMT_RANK":   1,
}

func (x MatchModeType) String() string {
	return proto.EnumName(MatchModeType_name, int32(x))
}
func (MatchModeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type MemberStatus int32

const (
	MemberStatus_MS_NONE    MemberStatus = 0
	MemberStatus_MS_CONFIRM MemberStatus = 1
	MemberStatus_MS_SETTLED MemberStatus = 2
)

var MemberStatus_name = map[int32]string{
	0: "MS_NONE",
	1: "MS_CONFIRM",
	2: "MS_SETTLED",
}
var MemberStatus_value = map[string]int32{
	"MS_NONE":    0,
	"MS_CONFIRM": 1,
	"MS_SETTLED": 2,
}

func (x MemberStatus) String() string {
	return proto.EnumName(MemberStatus_name, int32(x))
}
func (MemberStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type TeamOperateActionType int32

const (
	TeamOperateActionType_TOA_CHOOSE TeamOperateActionType = 0
	TeamOperateActionType_TOA_SETTLE TeamOperateActionType = 1
)

var TeamOperateActionType_name = map[int32]string{
	0: "TOA_CHOOSE",
	1: "TOA_SETTLE",
}
var TeamOperateActionType_value = map[string]int32{
	"TOA_CHOOSE": 0,
	"TOA_SETTLE": 1,
}

func (x TeamOperateActionType) String() string {
	return proto.EnumName(TeamOperateActionType_name, int32(x))
}
func (TeamOperateActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Type_BattleRetCode int32

const (
	Type_BattleRetCode_BRC_OK                 Type_BattleRetCode = 0
	Type_BattleRetCode_BRC_BATTLEKEY_ERROR    Type_BattleRetCode = 1
	Type_BattleRetCode_BRC_ROOM_NOT_EXIST     Type_BattleRetCode = 2
	Type_BattleRetCode_BRC_CHARID_NOT_IN_ROOM Type_BattleRetCode = 3
	Type_BattleRetCode_BRC_OTHER              Type_BattleRetCode = 100
)

var Type_BattleRetCode_name = map[int32]string{
	0:   "BRC_OK",
	1:   "BRC_BATTLEKEY_ERROR",
	2:   "BRC_ROOM_NOT_EXIST",
	3:   "BRC_CHARID_NOT_IN_ROOM",
	100: "BRC_OTHER",
}
var Type_BattleRetCode_value = map[string]int32{
	"BRC_OK":                 0,
	"BRC_BATTLEKEY_ERROR":    1,
	"BRC_ROOM_NOT_EXIST":     2,
	"BRC_CHARID_NOT_IN_ROOM": 3,
	"BRC_OTHER":              100,
}

func (x Type_BattleRetCode) String() string {
	return proto.EnumName(Type_BattleRetCode_name, int32(x))
}
func (Type_BattleRetCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type Type_BattleEndTypeID int32

const (
	Type_BattleEndTypeID_BEC_FINISH Type_BattleEndTypeID = 0
	Type_BattleEndTypeID_BEC_ABORT  Type_BattleEndTypeID = 1
)

var Type_BattleEndTypeID_name = map[int32]string{
	0: "BEC_FINISH",
	1: "BEC_ABORT",
}
var Type_BattleEndTypeID_value = map[string]int32{
	"BEC_FINISH": 0,
	"BEC_ABORT":  1,
}

func (x Type_BattleEndTypeID) String() string {
	return proto.EnumName(Type_BattleEndTypeID_name, int32(x))
}
func (Type_BattleEndTypeID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// /////////////////////////////////////////////
// for test
// /////////////////////////////////////////////
type Ping struct {
	ID uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Pong struct {
	ID uint32 `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Req_ServerTime struct {
	Time uint32 `protobuf:"varint,1,opt,name=Time" json:"Time,omitempty"`
}

func (m *Req_ServerTime) Reset()                    { *m = Req_ServerTime{} }
func (m *Req_ServerTime) String() string            { return proto.CompactTextString(m) }
func (*Req_ServerTime) ProtoMessage()               {}
func (*Req_ServerTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Rlt_ServerTime struct {
	Time uint32 `protobuf:"varint,2,opt,name=Time" json:"Time,omitempty"`
}

func (m *Rlt_ServerTime) Reset()                    { *m = Rlt_ServerTime{} }
func (m *Rlt_ServerTime) String() string            { return proto.CompactTextString(m) }
func (*Rlt_ServerTime) ProtoMessage()               {}
func (*Rlt_ServerTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// register and login
type Req_Register struct {
	UserName      string `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	Password      string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
	ClientVersion int32  `protobuf:"varint,3,opt,name=ClientVersion" json:"ClientVersion,omitempty"`
	IsLogin       bool   `protobuf:"varint,4,opt,name=IsLogin" json:"IsLogin,omitempty"`
}

func (m *Req_Register) Reset()                    { *m = Req_Register{} }
func (m *Req_Register) String() string            { return proto.CompactTextString(m) }
func (*Req_Register) ProtoMessage()               {}
func (*Req_Register) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Rlt_Register struct {
	RetCode    Type_LoginRetCode `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_LoginRetCode" json:"RetCode,omitempty"`
	UserID     uint32            `protobuf:"varint,2,opt,name=UserID" json:"UserID,omitempty"`
	SessionKey []byte            `protobuf:"bytes,3,opt,name=SessionKey,proto3" json:"SessionKey,omitempty"`
}

func (m *Rlt_Register) Reset()                    { *m = Rlt_Register{} }
func (m *Rlt_Register) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Register) ProtoMessage()               {}
func (*Rlt_Register) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// req server list
type Req_ServerList struct {
	Channel int32 `protobuf:"varint,1,opt,name=Channel" json:"Channel,omitempty"`
}

func (m *Req_ServerList) Reset()                    { *m = Req_ServerList{} }
func (m *Req_ServerList) String() string            { return proto.CompactTextString(m) }
func (*Req_ServerList) ProtoMessage()               {}
func (*Req_ServerList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Rlt_ServerList struct {
	ServerCount int32                        `protobuf:"varint,1,opt,name=ServerCount" json:"ServerCount,omitempty"`
	ServerList  []*Rlt_ServerList_ServerInfo `protobuf:"bytes,2,rep,name=ServerList" json:"ServerList,omitempty"`
}

func (m *Rlt_ServerList) Reset()                    { *m = Rlt_ServerList{} }
func (m *Rlt_ServerList) String() string            { return proto.CompactTextString(m) }
func (*Rlt_ServerList) ProtoMessage()               {}
func (*Rlt_ServerList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Rlt_ServerList) GetServerList() []*Rlt_ServerList_ServerInfo {
	if m != nil {
		return m.ServerList
	}
	return nil
}

type Rlt_ServerList_ServerInfo struct {
	ServerID    int32  `protobuf:"varint,1,opt,name=ServerID" json:"ServerID,omitempty"`
	ServerName  string `protobuf:"bytes,2,opt,name=ServerName" json:"ServerName,omitempty"`
	Status      int32  `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty"`
	ConnectAddr string `protobuf:"bytes,4,opt,name=ConnectAddr" json:"ConnectAddr,omitempty"`
}

func (m *Rlt_ServerList_ServerInfo) Reset()                    { *m = Rlt_ServerList_ServerInfo{} }
func (m *Rlt_ServerList_ServerInfo) String() string            { return proto.CompactTextString(m) }
func (*Rlt_ServerList_ServerInfo) ProtoMessage()               {}
func (*Rlt_ServerList_ServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type Req_Login struct {
	UserID     uint32 `protobuf:"varint,1,opt,name=UserID" json:"UserID,omitempty"`
	SessionKey []byte `protobuf:"bytes,2,opt,name=SessionKey,proto3" json:"SessionKey,omitempty"`
	ServerID   int32  `protobuf:"varint,3,opt,name=ServerID" json:"ServerID,omitempty"`
}

func (m *Req_Login) Reset()                    { *m = Req_Login{} }
func (m *Req_Login) String() string            { return proto.CompactTextString(m) }
func (*Req_Login) ProtoMessage()               {}
func (*Req_Login) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Rlt_Login struct {
	RetCode        Type_GameRetCode `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_GameRetCode" json:"RetCode,omitempty"`
	CharID         uint32           `protobuf:"varint,2,opt,name=CharID" json:"CharID,omitempty"`
	IsNewCharacter bool             `protobuf:"varint,3,opt,name=IsNewCharacter" json:"IsNewCharacter,omitempty"`
}

func (m *Rlt_Login) Reset()                    { *m = Rlt_Login{} }
func (m *Rlt_Login) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Login) ProtoMessage()               {}
func (*Rlt_Login) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type Req_SetCharName struct {
	CharName string `protobuf:"bytes,1,opt,name=CharName" json:"CharName,omitempty"`
}

func (m *Req_SetCharName) Reset()                    { *m = Req_SetCharName{} }
func (m *Req_SetCharName) String() string            { return proto.CompactTextString(m) }
func (*Req_SetCharName) ProtoMessage()               {}
func (*Req_SetCharName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type Rlt_SetCharName struct {
	RetCode Type_GameRetCode `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_GameRetCode" json:"RetCode,omitempty"`
}

func (m *Rlt_SetCharName) Reset()                    { *m = Rlt_SetCharName{} }
func (m *Rlt_SetCharName) String() string            { return proto.CompactTextString(m) }
func (*Rlt_SetCharName) ProtoMessage()               {}
func (*Rlt_SetCharName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type Req_Match struct {
	Action MatchActionType `protobuf:"varint,1,opt,name=Action,enum=clientmsg.MatchActionType" json:"Action,omitempty"`
	Mode   MatchModeType   `protobuf:"varint,2,opt,name=Mode,enum=clientmsg.MatchModeType" json:"Mode,omitempty"`
}

func (m *Req_Match) Reset()                    { *m = Req_Match{} }
func (m *Req_Match) String() string            { return proto.CompactTextString(m) }
func (*Req_Match) ProtoMessage()               {}
func (*Req_Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type Rlt_Match struct {
	RetCode Type_GameRetCode        `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_GameRetCode" json:"RetCode,omitempty"`
	Members []*Rlt_Match_MemberInfo `protobuf:"bytes,2,rep,name=Members" json:"Members,omitempty"`
}

func (m *Rlt_Match) Reset()                    { *m = Rlt_Match{} }
func (m *Rlt_Match) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Match) ProtoMessage()               {}
func (*Rlt_Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Rlt_Match) GetMembers() []*Rlt_Match_MemberInfo {
	if m != nil {
		return m.Members
	}
	return nil
}

type Rlt_Match_MemberInfo struct {
	CharID   uint32       `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	CharName string       `protobuf:"bytes,2,opt,name=CharName" json:"CharName,omitempty"`
	TeamID   int32        `protobuf:"varint,3,opt,name=TeamID" json:"TeamID,omitempty"`
	OwnerID  uint32       `protobuf:"varint,4,opt,name=OwnerID" json:"OwnerID,omitempty"`
	CharType int32        `protobuf:"varint,5,opt,name=CharType" json:"CharType,omitempty"`
	Status   MemberStatus `protobuf:"varint,6,opt,name=Status,enum=clientmsg.MemberStatus" json:"Status,omitempty"`
}

func (m *Rlt_Match_MemberInfo) Reset()                    { *m = Rlt_Match_MemberInfo{} }
func (m *Rlt_Match_MemberInfo) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Match_MemberInfo) ProtoMessage()               {}
func (*Rlt_Match_MemberInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13, 0} }

type Transfer_Team_Operate struct {
	Action   TeamOperateActionType `protobuf:"varint,1,opt,name=Action,enum=clientmsg.TeamOperateActionType" json:"Action,omitempty"`
	CharID   uint32                `protobuf:"varint,2,opt,name=CharID" json:"CharID,omitempty"`
	CharType int32                 `protobuf:"varint,3,opt,name=CharType" json:"CharType,omitempty"`
}

func (m *Transfer_Team_Operate) Reset()                    { *m = Transfer_Team_Operate{} }
func (m *Transfer_Team_Operate) String() string            { return proto.CompactTextString(m) }
func (*Transfer_Team_Operate) ProtoMessage()               {}
func (*Transfer_Team_Operate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type Rlt_NotifyBattleAddress struct {
	RoomID     int32  `protobuf:"varint,1,opt,name=RoomID" json:"RoomID,omitempty"`
	BattleAddr string `protobuf:"bytes,2,opt,name=BattleAddr" json:"BattleAddr,omitempty"`
	BattleKey  []byte `protobuf:"bytes,3,opt,name=BattleKey,proto3" json:"BattleKey,omitempty"`
}

func (m *Rlt_NotifyBattleAddress) Reset()                    { *m = Rlt_NotifyBattleAddress{} }
func (m *Rlt_NotifyBattleAddress) String() string            { return proto.CompactTextString(m) }
func (*Rlt_NotifyBattleAddress) ProtoMessage()               {}
func (*Rlt_NotifyBattleAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type Req_ConnectBS struct {
	RoomID    int32  `protobuf:"varint,1,opt,name=RoomID" json:"RoomID,omitempty"`
	BattleKey []byte `protobuf:"bytes,2,opt,name=BattleKey,proto3" json:"BattleKey,omitempty"`
	CharID    uint32 `protobuf:"varint,3,opt,name=CharID" json:"CharID,omitempty"`
}

func (m *Req_ConnectBS) Reset()                    { *m = Req_ConnectBS{} }
func (m *Req_ConnectBS) String() string            { return proto.CompactTextString(m) }
func (*Req_ConnectBS) ProtoMessage()               {}
func (*Req_ConnectBS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type Rlt_ConnectBS struct {
	RetCode Type_BattleRetCode          `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_BattleRetCode" json:"RetCode,omitempty"`
	Member  []*Rlt_ConnectBS_MemberInfo `protobuf:"bytes,2,rep,name=Member" json:"Member,omitempty"`
}

func (m *Rlt_ConnectBS) Reset()                    { *m = Rlt_ConnectBS{} }
func (m *Rlt_ConnectBS) String() string            { return proto.CompactTextString(m) }
func (*Rlt_ConnectBS) ProtoMessage()               {}
func (*Rlt_ConnectBS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Rlt_ConnectBS) GetMember() []*Rlt_ConnectBS_MemberInfo {
	if m != nil {
		return m.Member
	}
	return nil
}

type Rlt_ConnectBS_MemberInfo struct {
	CharID   uint32 `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	CharName string `protobuf:"bytes,2,opt,name=CharName" json:"CharName,omitempty"`
	CharType int32  `protobuf:"varint,3,opt,name=CharType" json:"CharType,omitempty"`
	TeamID   int32  `protobuf:"varint,4,opt,name=TeamID" json:"TeamID,omitempty"`
	OwnerID  uint32 `protobuf:"varint,5,opt,name=OwnerID" json:"OwnerID,omitempty"`
}

func (m *Rlt_ConnectBS_MemberInfo) Reset()                    { *m = Rlt_ConnectBS_MemberInfo{} }
func (m *Rlt_ConnectBS_MemberInfo) String() string            { return proto.CompactTextString(m) }
func (*Rlt_ConnectBS_MemberInfo) ProtoMessage()               {}
func (*Rlt_ConnectBS_MemberInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17, 0} }

type Rlt_StartBattle struct {
	RandSeed int32 `protobuf:"varint,1,opt,name=RandSeed" json:"RandSeed,omitempty"`
}

func (m *Rlt_StartBattle) Reset()                    { *m = Rlt_StartBattle{} }
func (m *Rlt_StartBattle) String() string            { return proto.CompactTextString(m) }
func (*Rlt_StartBattle) ProtoMessage()               {}
func (*Rlt_StartBattle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type Transfer_Command struct {
	Messages []*Transfer_Command_Message `protobuf:"bytes,1,rep,name=Messages" json:"Messages,omitempty"`
	CharID   uint32                      `protobuf:"varint,2,opt,name=CharID" json:"CharID,omitempty"`
	FrameID  uint32                      `protobuf:"varint,3,opt,name=FrameID" json:"FrameID,omitempty"`
}

func (m *Transfer_Command) Reset()                    { *m = Transfer_Command{} }
func (m *Transfer_Command) String() string            { return proto.CompactTextString(m) }
func (*Transfer_Command) ProtoMessage()               {}
func (*Transfer_Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Transfer_Command) GetMessages() []*Transfer_Command_Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Transfer_Command_Message struct {
	Msgid   uint32 `protobuf:"varint,6,opt,name=msgid" json:"msgid,omitempty"`
	Msgdata []byte `protobuf:"bytes,7,opt,name=msgdata,proto3" json:"msgdata,omitempty"`
}

func (m *Transfer_Command_Message) Reset()                    { *m = Transfer_Command_Message{} }
func (m *Transfer_Command_Message) String() string            { return proto.CompactTextString(m) }
func (*Transfer_Command_Message) ProtoMessage()               {}
func (*Transfer_Command_Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

type Req_EndBattle struct {
	TypeID Type_BattleEndTypeID `protobuf:"varint,1,opt,name=TypeID,enum=clientmsg.Type_BattleEndTypeID" json:"TypeID,omitempty"`
	CharID uint32               `protobuf:"varint,2,opt,name=CharID" json:"CharID,omitempty"`
}

func (m *Req_EndBattle) Reset()                    { *m = Req_EndBattle{} }
func (m *Req_EndBattle) String() string            { return proto.CompactTextString(m) }
func (*Req_EndBattle) ProtoMessage()               {}
func (*Req_EndBattle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type Rlt_EndBattle struct {
	RetCode Type_BattleRetCode `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_BattleRetCode" json:"RetCode,omitempty"`
	CharID  uint32             `protobuf:"varint,2,opt,name=CharID" json:"CharID,omitempty"`
}

func (m *Rlt_EndBattle) Reset()                    { *m = Rlt_EndBattle{} }
func (m *Rlt_EndBattle) String() string            { return proto.CompactTextString(m) }
func (*Rlt_EndBattle) ProtoMessage()               {}
func (*Rlt_EndBattle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type Transfer_Loading_Progress struct {
	CharID   uint32 `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	Progress int32  `protobuf:"varint,2,opt,name=Progress" json:"Progress,omitempty"`
}

func (m *Transfer_Loading_Progress) Reset()                    { *m = Transfer_Loading_Progress{} }
func (m *Transfer_Loading_Progress) String() string            { return proto.CompactTextString(m) }
func (*Transfer_Loading_Progress) ProtoMessage()               {}
func (*Transfer_Loading_Progress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func init() {
	proto.RegisterType((*Ping)(nil), "clientmsg.Ping")
	proto.RegisterType((*Pong)(nil), "clientmsg.Pong")
	proto.RegisterType((*Req_ServerTime)(nil), "clientmsg.Req_ServerTime")
	proto.RegisterType((*Rlt_ServerTime)(nil), "clientmsg.Rlt_ServerTime")
	proto.RegisterType((*Req_Register)(nil), "clientmsg.Req_Register")
	proto.RegisterType((*Rlt_Register)(nil), "clientmsg.Rlt_Register")
	proto.RegisterType((*Req_ServerList)(nil), "clientmsg.Req_ServerList")
	proto.RegisterType((*Rlt_ServerList)(nil), "clientmsg.Rlt_ServerList")
	proto.RegisterType((*Rlt_ServerList_ServerInfo)(nil), "clientmsg.Rlt_ServerList.ServerInfo")
	proto.RegisterType((*Req_Login)(nil), "clientmsg.Req_Login")
	proto.RegisterType((*Rlt_Login)(nil), "clientmsg.Rlt_Login")
	proto.RegisterType((*Req_SetCharName)(nil), "clientmsg.Req_SetCharName")
	proto.RegisterType((*Rlt_SetCharName)(nil), "clientmsg.Rlt_SetCharName")
	proto.RegisterType((*Req_Match)(nil), "clientmsg.Req_Match")
	proto.RegisterType((*Rlt_Match)(nil), "clientmsg.Rlt_Match")
	proto.RegisterType((*Rlt_Match_MemberInfo)(nil), "clientmsg.Rlt_Match.MemberInfo")
	proto.RegisterType((*Transfer_Team_Operate)(nil), "clientmsg.Transfer_Team_Operate")
	proto.RegisterType((*Rlt_NotifyBattleAddress)(nil), "clientmsg.Rlt_NotifyBattleAddress")
	proto.RegisterType((*Req_ConnectBS)(nil), "clientmsg.Req_ConnectBS")
	proto.RegisterType((*Rlt_ConnectBS)(nil), "clientmsg.Rlt_ConnectBS")
	proto.RegisterType((*Rlt_ConnectBS_MemberInfo)(nil), "clientmsg.Rlt_ConnectBS.MemberInfo")
	proto.RegisterType((*Rlt_StartBattle)(nil), "clientmsg.Rlt_StartBattle")
	proto.RegisterType((*Transfer_Command)(nil), "clientmsg.Transfer_Command")
	proto.RegisterType((*Transfer_Command_Message)(nil), "clientmsg.Transfer_Command.Message")
	proto.RegisterType((*Req_EndBattle)(nil), "clientmsg.Req_EndBattle")
	proto.RegisterType((*Rlt_EndBattle)(nil), "clientmsg.Rlt_EndBattle")
	proto.RegisterType((*Transfer_Loading_Progress)(nil), "clientmsg.Transfer_Loading_Progress")
	proto.RegisterEnum("clientmsg.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("clientmsg.Type_LoginRetCode", Type_LoginRetCode_name, Type_LoginRetCode_value)
	proto.RegisterEnum("clientmsg.Type_GameRetCode", Type_GameRetCode_name, Type_GameRetCode_value)
	proto.RegisterEnum("clientmsg.MatchActionType", MatchActionType_name, MatchActionType_value)
	proto.RegisterEnum("clientmsg.MatchModeType", MatchModeType_name, MatchModeType_value)
	proto.RegisterEnum("clientmsg.MemberStatus", MemberStatus_name, MemberStatus_value)
	proto.RegisterEnum("clientmsg.TeamOperateActionType", TeamOperateActionType_name, TeamOperateActionType_value)
	proto.RegisterEnum("clientmsg.Type_BattleRetCode", Type_BattleRetCode_name, Type_BattleRetCode_value)
	proto.RegisterEnum("clientmsg.Type_BattleEndTypeID", Type_BattleEndTypeID_name, Type_BattleEndTypeID_value)
}

var fileDescriptor0 = []byte{
	// 1504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x57, 0xcd, 0x6f, 0xdb, 0xc6,
	0x12, 0x0f, 0x65, 0xf9, 0x43, 0x6b, 0xcb, 0x66, 0x36, 0xf1, 0x47, 0x94, 0xbc, 0xf7, 0x02, 0xbe,
	0xe0, 0x21, 0x30, 0x5e, 0x5c, 0x20, 0x45, 0x9a, 0x16, 0x39, 0xb4, 0x14, 0x45, 0xdb, 0xac, 0x29,
	0xd2, 0x5d, 0x32, 0x69, 0x73, 0x28, 0x58, 0xc6, 0x62, 0x1c, 0x01, 0x96, 0x98, 0x52, 0x4c, 0xd3,
	0x00, 0x45, 0x0f, 0x05, 0xda, 0x5b, 0x7b, 0xec, 0xb9, 0xff, 0x49, 0xfa, 0x8f, 0x15, 0xe8, 0xcc,
	0x7e, 0x90, 0x2b, 0xda, 0xce, 0x21, 0x3d, 0x99, 0xf3, 0xdb, 0x99, 0xdf, 0xcc, 0xce, 0xfc, 0x76,
	0xbd, 0x22, 0xdd, 0x49, 0x36, 0x9b, 0xa5, 0xa7, 0xd9, 0xde, 0xcb, 0x22, 0x2f, 0x73, 0xda, 0x39,
	0x39, 0x1b, 0x67, 0xd3, 0x72, 0x32, 0x3b, 0xb5, 0xb6, 0x48, 0xfb, 0x78, 0x3c, 0x3d, 0xa5, 0xeb,
	0xa4, 0xe5, 0x0d, 0x76, 0x8c, 0xdb, 0xc6, 0xdd, 0x2e, 0x83, 0x2f, 0x8e, 0xe7, 0x15, 0xde, 0xaa,
	0xf0, 0x3b, 0x64, 0x9d, 0x65, 0xdf, 0x26, 0x51, 0x56, 0x7c, 0x97, 0x15, 0xf1, 0x78, 0x92, 0x51,
	0x4a, 0xda, 0xf8, 0x57, 0xc6, 0xf2, 0x6f, 0xee, 0x75, 0x56, 0x5e, 0xe4, 0xd5, 0xd2, 0xbc, 0x7e,
	0x31, 0xc8, 0x1a, 0x92, 0xb1, 0xec, 0x74, 0x3c, 0x2b, 0xb3, 0x82, 0xf6, 0xc8, 0xca, 0xe3, 0x59,
	0x56, 0x04, 0xa9, 0xa4, 0xeb, 0xb0, 0xca, 0xc6, 0xb5, 0xe3, 0x74, 0x36, 0x7b, 0x9d, 0x17, 0x23,
	0x4e, 0x02, 0x6b, 0xca, 0xa6, 0x77, 0x48, 0xd7, 0xe1, 0x3b, 0x7a, 0x92, 0x15, 0xb3, 0x71, 0x3e,
	0xdd, 0x59, 0x00, 0x87, 0x45, 0x36, 0x0f, 0xd2, 0x1d, 0xb2, 0xec, 0xcd, 0xfc, 0xfc, 0x74, 0x3c,
	0xdd, 0x69, 0xc3, 0xfa, 0x0a, 0x53, 0xa6, 0xf5, 0x23, 0xd4, 0x01, 0xe5, 0x56, 0x75, 0x7c, 0x44,
	0x96, 0x59, 0x56, 0x3a, 0xf9, 0x48, 0x94, 0xb1, 0x7e, 0xff, 0xd6, 0x5e, 0xd5, 0xb1, 0xbd, 0xf8,
	0xcd, 0xcb, 0x2c, 0xe1, 0x71, 0xd2, 0x87, 0x29, 0x67, 0xba, 0x45, 0x96, 0xb0, 0xde, 0xaa, 0x61,
	0xd2, 0xa2, 0xff, 0x26, 0x24, 0x82, 0x01, 0x40, 0x11, 0x47, 0xd9, 0x1b, 0x5e, 0xdc, 0x1a, 0xd3,
	0x10, 0x6b, 0x57, 0x6f, 0xaa, 0x0f, 0x35, 0x60, 0xad, 0xce, 0x8b, 0x74, 0x3a, 0xcd, 0xce, 0x78,
	0x05, 0x8b, 0x4c, 0x99, 0xd6, 0x5f, 0x86, 0xde, 0x5b, 0xee, 0x7c, 0x9b, 0xac, 0x0a, 0xcb, 0xc9,
	0x5f, 0x4d, 0x4b, 0x19, 0xa0, 0x43, 0x74, 0x80, 0x05, 0x28, 0x7f, 0x28, 0x6e, 0xe1, 0xee, 0xea,
	0xfd, 0x3b, 0xda, 0x9e, 0xe6, 0x09, 0xf7, 0xc4, 0xa7, 0x37, 0x7d, 0x9e, 0x33, 0x2d, 0xae, 0xf7,
	0x93, 0xa1, 0x68, 0x70, 0x09, 0x27, 0x22, 0xad, 0x81, 0xcc, 0x59, 0xd9, 0x62, 0xc7, 0xf8, 0xcd,
	0x67, 0x29, 0xe6, 0xa5, 0x21, 0xd8, 0xa9, 0xa8, 0x4c, 0xcb, 0x57, 0x33, 0x39, 0x2a, 0x69, 0xe1,
	0x56, 0x9c, 0x1c, 0xf6, 0x79, 0x52, 0xda, 0xa3, 0x51, 0xc1, 0xe7, 0xd4, 0x61, 0x3a, 0x64, 0x25,
	0xa4, 0x83, 0xbd, 0xe2, 0x03, 0xd0, 0x1a, 0x6e, 0xbc, 0xa3, 0xe1, 0xad, 0x66, 0xc3, 0xe7, 0x4a,
	0x5f, 0x98, 0x2f, 0xdd, 0x82, 0x5d, 0x76, 0xb0, 0x1f, 0x22, 0xc3, 0x83, 0xa6, 0x14, 0x6e, 0x36,
	0xa5, 0x70, 0x00, 0xfb, 0xb9, 0x48, 0x09, 0x30, 0x30, 0x4d, 0x09, 0xc2, 0xa2, 0xff, 0x23, 0xeb,
	0xde, 0x2c, 0xc8, 0x5e, 0xa3, 0x99, 0x9e, 0x80, 0xd6, 0x78, 0xfa, 0x15, 0xd6, 0x40, 0xad, 0x7b,
	0x64, 0x43, 0x28, 0xa2, 0x44, 0x4c, 0x1d, 0x00, 0xf5, 0xad, 0x0e, 0x87, 0xb2, 0xad, 0x43, 0x70,
	0xe7, 0x23, 0xac, 0xdd, 0xdf, 0xaf, 0x70, 0x6b, 0x22, 0xda, 0x3b, 0x4c, 0xcb, 0x93, 0x17, 0xf4,
	0x3e, 0x59, 0xb2, 0x4f, 0x4a, 0x3c, 0x50, 0x82, 0xa2, 0xa7, 0x51, 0x70, 0x0f, 0xb1, 0x8a, 0x6c,
	0x4c, 0x7a, 0xd2, 0xff, 0x93, 0xf6, 0x10, 0x93, 0xb6, 0x78, 0xc4, 0x4e, 0x33, 0x02, 0xd7, 0xb8,
	0x3f, 0xf7, 0xb2, 0xde, 0xb6, 0x44, 0xb3, 0x45, 0xbe, 0xf7, 0x6c, 0xf6, 0x27, 0x64, 0x79, 0x98,
	0x4d, 0x9e, 0xc1, 0x31, 0x97, 0xd2, 0xfe, 0x4f, 0x43, 0xda, 0x9c, 0x7d, 0x4f, 0xf8, 0x70, 0x55,
	0x2b, 0xff, 0xde, 0x5b, 0x90, 0x74, 0x8d, 0x6b, 0x63, 0x33, 0xe6, 0xc6, 0xa6, 0xf7, 0xbe, 0x35,
	0xdf, 0x7b, 0x8c, 0x89, 0xb3, 0x74, 0x52, 0x29, 0x49, 0x5a, 0x78, 0x84, 0xc3, 0xd7, 0x53, 0x2e,
	0xb1, 0x36, 0x27, 0x53, 0xa6, 0x62, 0xc3, 0x0d, 0xed, 0x2c, 0x0a, 0xf5, 0x29, 0x9b, 0x7e, 0x50,
	0x1d, 0x8c, 0x25, 0xde, 0x81, 0x6d, 0xbd, 0x81, 0xbc, 0x50, 0xb1, 0xac, 0x4e, 0x8c, 0xf5, 0xb3,
	0x41, 0x36, 0xe3, 0x22, 0x9d, 0xce, 0x9e, 0x67, 0x45, 0x82, 0xa9, 0x93, 0xf0, 0x65, 0x56, 0xa4,
	0x65, 0x46, 0x3f, 0x6e, 0x4c, 0xef, 0xb6, 0xde, 0x4c, 0x70, 0x94, 0x7e, 0x17, 0xcc, 0xf0, 0x32,
	0xf5, 0xea, 0x85, 0x2f, 0xcc, 0x17, 0x6e, 0xe5, 0x64, 0x1b, 0x5b, 0x1d, 0xe4, 0xe5, 0xf8, 0xf9,
	0x9b, 0x7e, 0x5a, 0x96, 0x67, 0x19, 0x9e, 0x57, 0x38, 0x73, 0x48, 0xc7, 0xf2, 0x7c, 0x52, 0x5d,
	0x13, 0xd2, 0xc2, 0x53, 0x5a, 0x3b, 0xaa, 0x4b, 0xa2, 0x46, 0xe8, 0x2d, 0xd2, 0x11, 0x56, 0x7d,
	0x6b, 0xd6, 0x80, 0xf5, 0x35, 0xe9, 0xa2, 0x52, 0xe5, 0xdd, 0xd0, 0x8f, 0x2e, 0x4d, 0x33, 0x47,
	0xd3, 0x6a, 0xd0, 0x68, 0x7b, 0x5d, 0xd0, 0xf7, 0x6a, 0xfd, 0xde, 0x02, 0x7e, 0xd8, 0x50, 0xcd,
	0xff, 0xb0, 0xa9, 0xce, 0x7f, 0x35, 0xd5, 0x29, 0x58, 0xcf, 0xe9, 0xf3, 0x11, 0x59, 0x12, 0xa3,
	0x93, 0xf2, 0xfc, 0x6f, 0x43, 0x9e, 0x55, 0x0a, 0x5d, 0xa2, 0x32, 0xa4, 0xf7, 0xdb, 0x3f, 0x57,
	0xe8, 0x3b, 0xc6, 0xa6, 0xa9, 0xb7, 0x7d, 0x99, 0x7a, 0x17, 0xe7, 0xd4, 0xcb, 0xaf, 0x26, 0xbc,
	0x6b, 0xca, 0xb4, 0x28, 0xc5, 0x86, 0x31, 0x01, 0x4b, 0xa7, 0xa3, 0x28, 0xcb, 0x46, 0xea, 0x3f,
	0x81, 0xb2, 0xad, 0x3f, 0x0d, 0x62, 0x56, 0xfa, 0x74, 0xf2, 0xc9, 0x04, 0x16, 0xe8, 0xa7, 0x64,
	0x65, 0x28, 0x5e, 0x24, 0x33, 0x08, 0x68, 0xf6, 0xa4, 0xe9, 0xbe, 0x27, 0x7d, 0x59, 0x15, 0x74,
	0xa9, 0x42, 0xa1, 0xec, 0xfd, 0x02, 0xf6, 0x5c, 0x8d, 0x53, 0x99, 0x3d, 0x7e, 0x49, 0xf0, 0x68,
	0x7a, 0x9d, 0x2c, 0x42, 0x9a, 0xf1, 0x88, 0x1f, 0xb1, 0x2e, 0x13, 0x06, 0x86, 0xc2, 0xc7, 0x28,
	0x2d, 0xd3, 0x9d, 0x65, 0x2e, 0x12, 0x65, 0x5a, 0xdf, 0x08, 0xa5, 0xb9, 0xd3, 0x91, 0xdc, 0xef,
	0x43, 0x68, 0x1a, 0x34, 0x4f, 0x0e, 0x61, 0x7d, 0xee, 0xbe, 0xd1, 0x84, 0x00, 0x01, 0xc2, 0x8d,
	0x49, 0xf7, 0xcb, 0xca, 0xe6, 0x19, 0xa0, 0xa7, 0x7a, 0x86, 0xf7, 0xd4, 0xda, 0x65, 0x19, 0x42,
	0x72, 0xa3, 0x6a, 0xab, 0x9f, 0xa7, 0x23, 0x78, 0xf3, 0x25, 0xc7, 0x45, 0x7e, 0xaa, 0x0e, 0xe8,
	0x65, 0xa2, 0x52, 0x3e, 0x9c, 0x0e, 0xe6, 0xaa, 0xec, 0xdd, 0x5f, 0xdb, 0x64, 0x55, 0x36, 0x94,
	0x0b, 0x69, 0x15, 0xfa, 0x1b, 0x27, 0xc7, 0x5e, 0x70, 0x60, 0x5e, 0x51, 0x46, 0x08, 0x86, 0x41,
	0x37, 0xc9, 0x55, 0x30, 0x98, 0xfb, 0x45, 0x12, 0xb9, 0xec, 0x89, 0xcb, 0x62, 0x6f, 0xe8, 0x9a,
	0x2d, 0x05, 0xfb, 0xb1, 0x0e, 0x2f, 0xd0, 0x6b, 0x64, 0x43, 0x7a, 0x33, 0xf7, 0xc0, 0x8b, 0x62,
	0x97, 0x99, 0x6d, 0x05, 0xfa, 0x71, 0x0d, 0x2e, 0x9e, 0xe3, 0xf5, 0x61, 0xc1, 0x5c, 0x3a, 0xc7,
	0xcb, 0xe1, 0x65, 0x6a, 0x92, 0x35, 0xe9, 0xed, 0x87, 0x07, 0x5e, 0x60, 0xae, 0x28, 0x04, 0x1c,
	0x05, 0xd2, 0x81, 0x3e, 0xd0, 0x8a, 0x31, 0x76, 0x0e, 0x6d, 0x16, 0xd8, 0x50, 0x13, 0x51, 0x38,
	0xa7, 0xac, 0xf1, 0x55, 0x8d, 0x73, 0x68, 0x03, 0x6e, 0xae, 0x69, 0x9c, 0x02, 0xe9, 0xc2, 0x25,
	0xd7, 0x93, 0x48, 0x10, 0xc6, 0xde, 0xfe, 0xd3, 0xbe, 0x1d, 0xc7, 0xbe, 0x6b, 0x0f, 0x06, 0xcc,
	0x8d, 0x22, 0x73, 0x1d, 0xc4, 0x68, 0x4a, 0x0e, 0x27, 0x0c, 0x02, 0xd7, 0x89, 0xfb, 0x91, 0xb9,
	0xa1, 0x50, 0x88, 0xaa, 0x51, 0x53, 0xaf, 0x23, 0xb6, 0x59, 0x2c, 0xa8, 0xcc, 0xab, 0x1a, 0x87,
	0x1b, 0x0c, 0x24, 0x4a, 0x35, 0x8e, 0x1a, 0xbd, 0x46, 0xb7, 0xc9, 0x35, 0x40, 0x63, 0x66, 0x07,
	0xd1, 0xbe, 0xcb, 0x80, 0x7e, 0x38, 0xb4, 0x83, 0x81, 0x79, 0x1d, 0x9e, 0x5e, 0xb7, 0xf4, 0x05,
	0x3f, 0xb4, 0x07, 0x30, 0xcc, 0xe4, 0x98, 0x85, 0x07, 0xbc, 0xd4, 0x4d, 0x7a, 0x93, 0x6c, 0xeb,
	0x1e, 0xb1, 0x6b, 0x0f, 0xc3, 0x63, 0x97, 0xd9, 0xb1, 0x6b, 0x6e, 0xed, 0x7e, 0x4f, 0xae, 0x9e,
	0x7b, 0x19, 0x53, 0x42, 0x96, 0x7c, 0xe6, 0x24, 0xe1, 0x11, 0x68, 0x02, 0xe6, 0x82, 0xdf, 0xb6,
	0xe3, 0x84, 0x8f, 0x03, 0xa8, 0xe9, 0x2b, 0x9c, 0x8b, 0x41, 0x6f, 0x90, 0x4d, 0x1d, 0x86, 0x26,
	0xc9, 0xa5, 0x16, 0x6e, 0x17, 0x97, 0x8e, 0xed, 0x28, 0xfa, 0x32, 0x64, 0x83, 0xc4, 0x65, 0x2c,
	0x64, 0x20, 0x91, 0x2e, 0xe9, 0x70, 0xd6, 0xf8, 0x10, 0x74, 0x30, 0xda, 0xfd, 0x03, 0x6f, 0x98,
	0xc6, 0xe3, 0x00, 0x33, 0x1f, 0xa8, 0xcc, 0xc0, 0x83, 0xdf, 0x38, 0x34, 0xce, 0xff, 0xc4, 0xf6,
	0xbd, 0x01, 0xa4, 0x86, 0x61, 0x21, 0xce, 0x27, 0x85, 0x9e, 0x04, 0x6b, 0xac, 0x11, 0xe8, 0xfc,
	0xbe, 0xc7, 0x86, 0x30, 0x67, 0xd8, 0x78, 0x0d, 0xdb, 0xbe, 0xaf, 0x96, 0xdc, 0x01, 0x8c, 0x1c,
	0xb4, 0x59, 0x2f, 0x8a, 0x12, 0xbb, 0x58, 0xe2, 0x81, 0x56, 0xe2, 0x67, 0xa0, 0xdf, 0xf9, 0xf7,
	0x12, 0x5d, 0x83, 0x2b, 0xd0, 0x8e, 0x93, 0xcf, 0x43, 0x50, 0xde, 0x15, 0xf8, 0x99, 0x45, 0xd0,
	0x72, 0xec, 0xc0, 0x71, 0x7d, 0x28, 0x6d, 0x03, 0x0e, 0x97, 0x1d, 0x57, 0x25, 0xb4, 0x76, 0xef,
	0x91, 0xee, 0xdc, 0xfb, 0x89, 0x47, 0x0c, 0xb1, 0x5f, 0x6c, 0x68, 0xfb, 0xc0, 0x80, 0x7c, 0x38,
	0x6e, 0x3b, 0x38, 0x32, 0x8d, 0xdd, 0x47, 0xa0, 0x43, 0xed, 0xb5, 0xc0, 0x0f, 0x64, 0x04, 0xce,
	0x81, 0x2b, 0x93, 0x45, 0x15, 0xb7, 0x21, 0x6d, 0x90, 0x36, 0x28, 0x64, 0x00, 0xb9, 0x1e, 0xc2,
	0x8b, 0xe2, 0xa2, 0xf7, 0x01, 0x3a, 0xc6, 0xa1, 0x9d, 0x38, 0x87, 0x61, 0x18, 0x49, 0x22, 0xb4,
	0x45, 0x24, 0x64, 0xfd, 0x81, 0xd0, 0xf3, 0x77, 0x13, 0x8e, 0xa2, 0xaf, 0x46, 0x01, 0xea, 0xc3,
	0x6f, 0xa1, 0xc6, 0x23, 0xf7, 0xa9, 0x6c, 0x98, 0x81, 0x33, 0xc2, 0x05, 0x16, 0x86, 0xc3, 0x39,
	0x0d, 0xf4, 0xc8, 0x16, 0xe2, 0x78, 0xe8, 0xbc, 0x01, 0x5f, 0xf1, 0x02, 0xee, 0x25, 0x74, 0xd0,
	0xd7, 0x9a, 0xfc, 0x80, 0x5c, 0xbf, 0xe8, 0xf2, 0xc5, 0x2a, 0xfb, 0xae, 0x93, 0xec, 0x7b, 0x81,
	0x17, 0x1d, 0x42, 0x0d, 0x18, 0x06, 0xb6, 0xdd, 0x0f, 0x19, 0x08, 0xf0, 0xd9, 0x12, 0xff, 0x4d,
	0xfc, 0xe1, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x67, 0x73, 0x42, 0x32, 0x24, 0x0f, 0x00, 0x00,
}
