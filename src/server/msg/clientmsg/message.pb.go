// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package clientmsg is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Ping
	Pong
	Req_ServerTime
	Rlt_ServerTime
	Req_Register
	Rlt_Register
	Req_ServerList
	Rlt_ServerList
	Req_Login
	Rlt_Login
	Req_Re_ConnectGS
	Rlt_Re_ConnectGS
	Req_SetCharName
	Rlt_SetCharName
	Req_Match
	Rlt_Match
	Transfer_Team_Operate
	Rlt_NotifyBattleAddress
	Req_Friend_Operate
	Rlt_Friend_Operate
	Req_Chat
	Rlt_Chat
	Req_QueryCharInfo
	Rlt_QueryCharInfo
	Req_MakeTeamOperate
	Rlt_MakeTeamOperate
	Rlt_Give_Reward
	MailInfo
	Req_Mail_Action
	Rlt_Mail_Action
	Rlt_Asset_Friend
	Rlt_Asset_Cash
	Rlt_Asset_Mail
	Rlt_Asset_Item
	Rlt_Asset_Hero
	Rlt_Asset_Tutorial
	Rlt_Asset_Statistic
	Rlt_Asset_Achievement
	Rlt_Asset_Task
	Req_ConnectBS
	Rlt_ConnectBS
	Req_Re_ConnectBS
	Rlt_StartBattle
	Transfer_Command
	Req_EndBattle
	Rlt_EndBattle
	Transfer_Loading_Progress
	Transfer_Battle_Message
	Rlt_Continue_Battle
	Transfer_Battle_Heartbeat
*/
package clientmsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MessageType int32

const (
	MessageType_MT_PING                      MessageType = 0
	MessageType_MT_PONG                      MessageType = 1
	MessageType_MT_REQ_SERVERTIME            MessageType = 2
	MessageType_MT_RLT_SERVERTIME            MessageType = 3
	MessageType_MT_REQ_REGISTER              MessageType = 4
	MessageType_MT_RLT_REGISTER              MessageType = 5
	MessageType_MT_REQ_SERVERLIST            MessageType = 6
	MessageType_MT_RLT_SERVERLIST            MessageType = 7
	MessageType_MT_REQ_LOGIN                 MessageType = 8
	MessageType_MT_RLT_LOGIN                 MessageType = 9
	MessageType_MT_REQ_SETCHARNAME           MessageType = 10
	MessageType_MT_RLT_SETCHARNAME           MessageType = 11
	MessageType_MT_REQ_MATCH                 MessageType = 12
	MessageType_MT_RLT_MATCH                 MessageType = 13
	MessageType_MT_RLT_NOTIFYBATTLEADDRESS   MessageType = 14
	MessageType_MT_REQ_CONNECTBS             MessageType = 15
	MessageType_MT_RLT_CONNECTBS             MessageType = 16
	MessageType_MT_RLT_STARTBATTLE           MessageType = 17
	MessageType_MT_REQ_ENDBATTLE             MessageType = 18
	MessageType_MT_RLT_ENDBATTLE             MessageType = 19
	MessageType_MT_TRANSFER_COMMAND          MessageType = 20
	MessageType_MT_TRANSFER_LOADING_PROGRESS MessageType = 21
	MessageType_MT_TRANSFER_TEAMOPERATE      MessageType = 22
	MessageType_MT_REQ_FRIEND_OPERATE        MessageType = 23
	MessageType_MT_RLT_FRIEND_OPERATE        MessageType = 24
	MessageType_MT_REQ_CHAT                  MessageType = 25
	MessageType_MT_RLT_CHAT                  MessageType = 26
	MessageType_MT_REQ_QUERY_CHARINFO        MessageType = 27
	MessageType_MT_RLT_QUERY_CHARINFO        MessageType = 28
	MessageType_MT_REQ_MAKETEAM_OPERATE      MessageType = 29
	MessageType_MT_RLT_MAKETEAM_OPERATE      MessageType = 30
	MessageType_MT_TRANSFER_BATTLT_MESSAGE   MessageType = 31
	MessageType_MT_RLT_ASSET_FRIEND          MessageType = 32
	MessageType_MT_RLT_ASSET_CASH            MessageType = 33
	MessageType_MT_RLT_ASSET_MAIL            MessageType = 34
	MessageType_MT_RLT_ASSET_ITEM            MessageType = 35
	MessageType_MT_RLT_ASSET_HERO            MessageType = 36
	MessageType_MT_RLT_ASSET_TUTORIAL        MessageType = 37
	MessageType_MT_RLT_ASSET_STATISTIC       MessageType = 38
	MessageType_MT_RLT_ASSET_ACHIEVEMENT     MessageType = 39
	MessageType_MT_RLT_ASSET_TASK            MessageType = 40
	MessageType_MT_REQ_MAIL_ACTION           MessageType = 41
	MessageType_MT_RLT_MAIL_ACTION           MessageType = 42
	MessageType_MT_RLT_GIVE_REWARD           MessageType = 43
	MessageType_MT_REQ_RE_CONNECTGS          MessageType = 44
	MessageType_MT_RLT_RE_CONNECTGS          MessageType = 45
	MessageType_MT_REQ_RE_CONNECTBS          MessageType = 46
	MessageType_MT_RLT_CONTINUE_BATTLE       MessageType = 47
	MessageType_MT_TRANSFER_BATTLE_HEARTBEAT MessageType = 48
)

var MessageType_name = map[int32]string{
	0:  "MT_PING",
	1:  "MT_PONG",
	2:  "MT_REQ_SERVERTIME",
	3:  "MT_RLT_SERVERTIME",
	4:  "MT_REQ_REGISTER",
	5:  "MT_RLT_REGISTER",
	6:  "MT_REQ_SERVERLIST",
	7:  "MT_RLT_SERVERLIST",
	8:  "MT_REQ_LOGIN",
	9:  "MT_RLT_LOGIN",
	10: "MT_REQ_SETCHARNAME",
	11: "MT_RLT_SETCHARNAME",
	12: "MT_REQ_MATCH",
	13: "MT_RLT_MATCH",
	14: "MT_RLT_NOTIFYBATTLEADDRESS",
	15: "MT_REQ_CONNECTBS",
	16: "MT_RLT_CONNECTBS",
	17: "MT_RLT_STARTBATTLE",
	18: "MT_REQ_ENDBATTLE",
	19: "MT_RLT_ENDBATTLE",
	20: "MT_TRANSFER_COMMAND",
	21: "MT_TRANSFER_LOADING_PROGRESS",
	22: "MT_TRANSFER_TEAMOPERATE",
	23: "MT_REQ_FRIEND_OPERATE",
	24: "MT_RLT_FRIEND_OPERATE",
	25: "MT_REQ_CHAT",
	26: "MT_RLT_CHAT",
	27: "MT_REQ_QUERY_CHARINFO",
	28: "MT_RLT_QUERY_CHARINFO",
	29: "MT_REQ_MAKETEAM_OPERATE",
	30: "MT_RLT_MAKETEAM_OPERATE",
	31: "MT_TRANSFER_BATTLT_MESSAGE",
	32: "MT_RLT_ASSET_FRIEND",
	33: "MT_RLT_ASSET_CASH",
	34: "MT_RLT_ASSET_MAIL",
	35: "MT_RLT_ASSET_ITEM",
	36: "MT_RLT_ASSET_HERO",
	37: "MT_RLT_ASSET_TUTORIAL",
	38: "MT_RLT_ASSET_STATISTIC",
	39: "MT_RLT_ASSET_ACHIEVEMENT",
	40: "MT_RLT_ASSET_TASK",
	41: "MT_REQ_MAIL_ACTION",
	42: "MT_RLT_MAIL_ACTION",
	43: "MT_RLT_GIVE_REWARD",
	44: "MT_REQ_RE_CONNECTGS",
	45: "MT_RLT_RE_CONNECTGS",
	46: "MT_REQ_RE_CONNECTBS",
	47: "MT_RLT_CONTINUE_BATTLE",
	48: "MT_TRANSFER_BATTLE_HEARTBEAT",
}
var MessageType_value = map[string]int32{
	"MT_PING":                      0,
	"MT_PONG":                      1,
	"MT_REQ_SERVERTIME":            2,
	"MT_RLT_SERVERTIME":            3,
	"MT_REQ_REGISTER":              4,
	"MT_RLT_REGISTER":              5,
	"MT_REQ_SERVERLIST":            6,
	"MT_RLT_SERVERLIST":            7,
	"MT_REQ_LOGIN":                 8,
	"MT_RLT_LOGIN":                 9,
	"MT_REQ_SETCHARNAME":           10,
	"MT_RLT_SETCHARNAME":           11,
	"MT_REQ_MATCH":                 12,
	"MT_RLT_MATCH":                 13,
	"MT_RLT_NOTIFYBATTLEADDRESS":   14,
	"MT_REQ_CONNECTBS":             15,
	"MT_RLT_CONNECTBS":             16,
	"MT_RLT_STARTBATTLE":           17,
	"MT_REQ_ENDBATTLE":             18,
	"MT_RLT_ENDBATTLE":             19,
	"MT_TRANSFER_COMMAND":          20,
	"MT_TRANSFER_LOADING_PROGRESS": 21,
	"MT_TRANSFER_TEAMOPERATE":      22,
	"MT_REQ_FRIEND_OPERATE":        23,
	"MT_RLT_FRIEND_OPERATE":        24,
	"MT_REQ_CHAT":                  25,
	"MT_RLT_CHAT":                  26,
	"MT_REQ_QUERY_CHARINFO":        27,
	"MT_RLT_QUERY_CHARINFO":        28,
	"MT_REQ_MAKETEAM_OPERATE":      29,
	"MT_RLT_MAKETEAM_OPERATE":      30,
	"MT_TRANSFER_BATTLT_MESSAGE":   31,
	"MT_RLT_ASSET_FRIEND":          32,
	"MT_RLT_ASSET_CASH":            33,
	"MT_RLT_ASSET_MAIL":            34,
	"MT_RLT_ASSET_ITEM":            35,
	"MT_RLT_ASSET_HERO":            36,
	"MT_RLT_ASSET_TUTORIAL":        37,
	"MT_RLT_ASSET_STATISTIC":       38,
	"MT_RLT_ASSET_ACHIEVEMENT":     39,
	"MT_RLT_ASSET_TASK":            40,
	"MT_REQ_MAIL_ACTION":           41,
	"MT_RLT_MAIL_ACTION":           42,
	"MT_RLT_GIVE_REWARD":           43,
	"MT_REQ_RE_CONNECTGS":          44,
	"MT_RLT_RE_CONNECTGS":          45,
	"MT_REQ_RE_CONNECTBS":          46,
	"MT_RLT_CONTINUE_BATTLE":       47,
	"MT_TRANSFER_BATTLE_HEARTBEAT": 48,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Type_LoginRetCode int32

const (
	Type_LoginRetCode_LRC_OK                Type_LoginRetCode = 0
	Type_LoginRetCode_LRC_ACCOUNT_EXIST     Type_LoginRetCode = 1
	Type_LoginRetCode_LRC_ACCOUNT_NOT_EXIST Type_LoginRetCode = 2
	Type_LoginRetCode_LRC_PASSWORD_ERROR    Type_LoginRetCode = 3
	Type_LoginRetCode_LRC_OTHER             Type_LoginRetCode = 100
)

var Type_LoginRetCode_name = map[int32]string{
	0:   "LRC_OK",
	1:   "LRC_ACCOUNT_EXIST",
	2:   "LRC_ACCOUNT_NOT_EXIST",
	3:   "LRC_PASSWORD_ERROR",
	100: "LRC_OTHER",
}
var Type_LoginRetCode_value = map[string]int32{
	"LRC_OK":                0,
	"LRC_ACCOUNT_EXIST":     1,
	"LRC_ACCOUNT_NOT_EXIST": 2,
	"LRC_PASSWORD_ERROR":    3,
	"LRC_OTHER":             100,
}

func (x Type_LoginRetCode) String() string {
	return proto.EnumName(Type_LoginRetCode_name, int32(x))
}
func (Type_LoginRetCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Type_GameRetCode int32

const (
	Type_GameRetCode_GRC_OK                  Type_GameRetCode = 0
	Type_GameRetCode_GRC_NAME_NOT_VALID      Type_GameRetCode = 1
	Type_GameRetCode_GRC_QUERY_TOO_MANY      Type_GameRetCode = 2
	Type_GameRetCode_GRC_MATCH_START         Type_GameRetCode = 9
	Type_GameRetCode_GRC_MATCH_OK            Type_GameRetCode = 10
	Type_GameRetCode_GRC_MATCH_CONFIRM       Type_GameRetCode = 11
	Type_GameRetCode_GRC_MATCH_ALL_CONFIRMED Type_GameRetCode = 12
	Type_GameRetCode_GRC_MATCH_ERROR         Type_GameRetCode = 13
	Type_GameRetCode_GRC_MATCH_CONTINUE      Type_GameRetCode = 14
	Type_GameRetCode_GRC_MATCH_ALL_FIXED     Type_GameRetCode = 15
	Type_GameRetCode_GRC_MATCH_CANCELED      Type_GameRetCode = 16
	Type_GameRetCode_GRC_MATCH_FULL          Type_GameRetCode = 17
	Type_GameRetCode_GRC_OTHER               Type_GameRetCode = 100
)

var Type_GameRetCode_name = map[int32]string{
	0:   "GRC_OK",
	1:   "GRC_NAME_NOT_VALID",
	2:   "GRC_QUERY_TOO_MANY",
	9:   "GRC_MATCH_START",
	10:  "GRC_MATCH_OK",
	11:  "GRC_MATCH_CONFIRM",
	12:  "GRC_MATCH_ALL_CONFIRMED",
	13:  "GRC_MATCH_ERROR",
	14:  "GRC_MATCH_CONTINUE",
	15:  "GRC_MATCH_ALL_FIXED",
	16:  "GRC_MATCH_CANCELED",
	17:  "GRC_MATCH_FULL",
	100: "GRC_OTHER",
}
var Type_GameRetCode_value = map[string]int32{
	"GRC_OK":                  0,
	"GRC_NAME_NOT_VALID":      1,
	"GRC_QUERY_TOO_MANY":      2,
	"GRC_MATCH_START":         9,
	"GRC_MATCH_OK":            10,
	"GRC_MATCH_CONFIRM":       11,
	"GRC_MATCH_ALL_CONFIRMED": 12,
	"GRC_MATCH_ERROR":         13,
	"GRC_MATCH_CONTINUE":      14,
	"GRC_MATCH_ALL_FIXED":     15,
	"GRC_MATCH_CANCELED":      16,
	"GRC_MATCH_FULL":          17,
	"GRC_OTHER":               100,
}

func (x Type_GameRetCode) String() string {
	return proto.EnumName(Type_GameRetCode_name, int32(x))
}
func (Type_GameRetCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Type_CashType int32

const (
	Type_CashType_TCT_NONE    Type_CashType = 0
	Type_CashType_TCT_GOLD    Type_CashType = 1
	Type_CashType_TCT_SILVER  Type_CashType = 2
	Type_CashType_TCT_DIAMOND Type_CashType = 3
	Type_CashType_TCT_EXP     Type_CashType = 4
)

var Type_CashType_name = map[int32]string{
	0: "TCT_NONE",
	1: "TCT_GOLD",
	2: "TCT_SILVER",
	3: "TCT_DIAMOND",
	4: "TCT_EXP",
}
var Type_CashType_value = map[string]int32{
	"TCT_NONE":    0,
	"TCT_GOLD":    1,
	"TCT_SILVER":  2,
	"TCT_DIAMOND": 3,
	"TCT_EXP":     4,
}

func (x Type_CashType) String() string {
	return proto.EnumName(Type_CashType_name, int32(x))
}
func (Type_CashType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Type_Vec3X int32

const (
	Type_Vec3X_TVX_NONE Type_Vec3X = 0
	Type_Vec3X_TVX_CASH Type_Vec3X = 1
	Type_Vec3X_TVX_HERO Type_Vec3X = 2
	Type_Vec3X_TVX_ITEM Type_Vec3X = 3
)

var Type_Vec3X_name = map[int32]string{
	0: "TVX_NONE",
	1: "TVX_CASH",
	2: "TVX_HERO",
	3: "TVX_ITEM",
}
var Type_Vec3X_value = map[string]int32{
	"TVX_NONE": 0,
	"TVX_CASH": 1,
	"TVX_HERO": 2,
	"TVX_ITEM": 3,
}

func (x Type_Vec3X) String() string {
	return proto.EnumName(Type_Vec3X_name, int32(x))
}
func (Type_Vec3X) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type MatchActionType int32

const (
	MatchActionType_MAT_JOIN    MatchActionType = 0
	MatchActionType_MAT_CANCEL  MatchActionType = 1
	MatchActionType_MAT_CONFIRM MatchActionType = 2
	MatchActionType_MAT_REJECT  MatchActionType = 3
)

var MatchActionType_name = map[int32]string{
	0: "MAT_JOIN",
	1: "MAT_CANCEL",
	2: "MAT_CONFIRM",
	3: "MAT_REJECT",
}
var MatchActionType_value = map[string]int32{
	"MAT_JOIN":    0,
	"MAT_CANCEL":  1,
	"MAT_CONFIRM": 2,
	"MAT_REJECT":  3,
}

func (x MatchActionType) String() string {
	return proto.EnumName(MatchActionType_name, int32(x))
}
func (MatchActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type MatchModeType int32

const (
	MatchModeType_MMT_NORMAL MatchModeType = 0
	MatchModeType_MMT_RANK   MatchModeType = 1
	MatchModeType_MMT_AI     MatchModeType = 2
)

var MatchModeType_name = map[int32]string{
	0: "MMT_NORMAL",
	1: "MMT_RANK",
	2: "MMT_AI",
}
var MatchModeType_value = map[string]int32{
	"MMT_NORMAL": 0,
	"MMT_RANK":   1,
	"MMT_AI":     2,
}

func (x MatchModeType) String() string {
	return proto.EnumName(MatchModeType_name, int32(x))
}
func (MatchModeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type MemberStatus int32

const (
	MemberStatus_MS_NONE     MemberStatus = 0
	MemberStatus_MS_CONFIRM  MemberStatus = 1
	MemberStatus_MS_SETTLED  MemberStatus = 2
	MemberStatus_MS_REJECTED MemberStatus = 3
)

var MemberStatus_name = map[int32]string{
	0: "MS_NONE",
	1: "MS_CONFIRM",
	2: "MS_SETTLED",
	3: "MS_REJECTED",
}
var MemberStatus_value = map[string]int32{
	"MS_NONE":     0,
	"MS_CONFIRM":  1,
	"MS_SETTLED":  2,
	"MS_REJECTED": 3,
}

func (x MemberStatus) String() string {
	return proto.EnumName(MemberStatus_name, int32(x))
}
func (MemberStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type TeamOperateActionType int32

const (
	TeamOperateActionType_TOA_CHOOSE TeamOperateActionType = 0
	TeamOperateActionType_TOA_SETTLE TeamOperateActionType = 1
)

var TeamOperateActionType_name = map[int32]string{
	0: "TOA_CHOOSE",
	1: "TOA_SETTLE",
}
var TeamOperateActionType_value = map[string]int32{
	"TOA_CHOOSE": 0,
	"TOA_SETTLE": 1,
}

func (x TeamOperateActionType) String() string {
	return proto.EnumName(TeamOperateActionType_name, int32(x))
}
func (TeamOperateActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type FriendOperateActionType int32

const (
	FriendOperateActionType_FOAT_SEARCH     FriendOperateActionType = 0
	FriendOperateActionType_FOAT_ADD_FRIEND FriendOperateActionType = 1
	FriendOperateActionType_FOAT_DEL_FRIEND FriendOperateActionType = 2
	FriendOperateActionType_FOAT_ACCEPT     FriendOperateActionType = 3
	FriendOperateActionType_FOAT_REJECT     FriendOperateActionType = 4
)

var FriendOperateActionType_name = map[int32]string{
	0: "FOAT_SEARCH",
	1: "FOAT_ADD_FRIEND",
	2: "FOAT_DEL_FRIEND",
	3: "FOAT_ACCEPT",
	4: "FOAT_REJECT",
}
var FriendOperateActionType_value = map[string]int32{
	"FOAT_SEARCH":     0,
	"FOAT_ADD_FRIEND": 1,
	"FOAT_DEL_FRIEND": 2,
	"FOAT_ACCEPT":     3,
	"FOAT_REJECT":     4,
}

func (x FriendOperateActionType) String() string {
	return proto.EnumName(FriendOperateActionType_name, int32(x))
}
func (FriendOperateActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ChatChannelType int32

const (
	ChatChannelType_CCT_SYSTEM ChatChannelType = 0
	ChatChannelType_CCT_WORLD  ChatChannelType = 1
	ChatChannelType_CCT_TEAM   ChatChannelType = 2
	ChatChannelType_CCT_P2P    ChatChannelType = 3
)

var ChatChannelType_name = map[int32]string{
	0: "CCT_SYSTEM",
	1: "CCT_WORLD",
	2: "CCT_TEAM",
	3: "CCT_P2P",
}
var ChatChannelType_value = map[string]int32{
	"CCT_SYSTEM": 0,
	"CCT_WORLD":  1,
	"CCT_TEAM":   2,
	"CCT_P2P":    3,
}

func (x ChatChannelType) String() string {
	return proto.EnumName(ChatChannelType_name, int32(x))
}
func (ChatChannelType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type UserStatus int32

const (
	UserStatus_US_PLAYER_OFFLINE UserStatus = 0
	UserStatus_US_PLAYER_ONLINE  UserStatus = 1
	UserStatus_US_PLAYER_MATCH   UserStatus = 2
	UserStatus_US_PLAYER_BATTLE  UserStatus = 3
)

var UserStatus_name = map[int32]string{
	0: "US_PLAYER_OFFLINE",
	1: "US_PLAYER_ONLINE",
	2: "US_PLAYER_MATCH",
	3: "US_PLAYER_BATTLE",
}
var UserStatus_value = map[string]int32{
	"US_PLAYER_OFFLINE": 0,
	"US_PLAYER_ONLINE":  1,
	"US_PLAYER_MATCH":   2,
	"US_PLAYER_BATTLE":  3,
}

func (x UserStatus) String() string {
	return proto.EnumName(UserStatus_name, int32(x))
}
func (UserStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type MakeTeamOperateType int32

const (
	MakeTeamOperateType_MTOT_CREATE       MakeTeamOperateType = 0
	MakeTeamOperateType_MTOT_INVITE       MakeTeamOperateType = 1
	MakeTeamOperateType_MTOT_KICK         MakeTeamOperateType = 2
	MakeTeamOperateType_MTOT_ACCEPT       MakeTeamOperateType = 3
	MakeTeamOperateType_MTOT_REJECT       MakeTeamOperateType = 4
	MakeTeamOperateType_MTOT_START_MATCH  MakeTeamOperateType = 5
	MakeTeamOperateType_MTOT_START_BATTLE MakeTeamOperateType = 6
	MakeTeamOperateType_MTOT_CHANGE_TEAM  MakeTeamOperateType = 7
	MakeTeamOperateType_MTOT_LEAVE        MakeTeamOperateType = 8
)

var MakeTeamOperateType_name = map[int32]string{
	0: "MTOT_CREATE",
	1: "MTOT_INVITE",
	2: "MTOT_KICK",
	3: "MTOT_ACCEPT",
	4: "MTOT_REJECT",
	5: "MTOT_START_MATCH",
	6: "MTOT_START_BATTLE",
	7: "MTOT_CHANGE_TEAM",
	8: "MTOT_LEAVE",
}
var MakeTeamOperateType_value = map[string]int32{
	"MTOT_CREATE":       0,
	"MTOT_INVITE":       1,
	"MTOT_KICK":         2,
	"MTOT_ACCEPT":       3,
	"MTOT_REJECT":       4,
	"MTOT_START_MATCH":  5,
	"MTOT_START_BATTLE": 6,
	"MTOT_CHANGE_TEAM":  7,
	"MTOT_LEAVE":        8,
}

func (x MakeTeamOperateType) String() string {
	return proto.EnumName(MakeTeamOperateType_name, int32(x))
}
func (MakeTeamOperateType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type MailActionType int32

const (
	MailActionType_MAT_LIST_MAIL MailActionType = 0
	MailActionType_MAT_READ      MailActionType = 1
	MailActionType_MAT_RECEIVE   MailActionType = 2
	MailActionType_MAT_ERASE     MailActionType = 3
)

var MailActionType_name = map[int32]string{
	0: "MAT_LIST_MAIL",
	1: "MAT_READ",
	2: "MAT_RECEIVE",
	3: "MAT_ERASE",
}
var MailActionType_value = map[string]int32{
	"MAT_LIST_MAIL": 0,
	"MAT_READ":      1,
	"MAT_RECEIVE":   2,
	"MAT_ERASE":     3,
}

func (x MailActionType) String() string {
	return proto.EnumName(MailActionType_name, int32(x))
}
func (MailActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type Type_BattleRetCode int32

const (
	Type_BattleRetCode_BRC_OK                 Type_BattleRetCode = 0
	Type_BattleRetCode_BRC_BATTLEKEY_ERROR    Type_BattleRetCode = 1
	Type_BattleRetCode_BRC_ROOM_NOT_EXIST     Type_BattleRetCode = 2
	Type_BattleRetCode_BRC_CHARID_NOT_IN_ROOM Type_BattleRetCode = 3
	Type_BattleRetCode_BRC_OTHER              Type_BattleRetCode = 100
)

var Type_BattleRetCode_name = map[int32]string{
	0:   "BRC_OK",
	1:   "BRC_BATTLEKEY_ERROR",
	2:   "BRC_ROOM_NOT_EXIST",
	3:   "BRC_CHARID_NOT_IN_ROOM",
	100: "BRC_OTHER",
}
var Type_BattleRetCode_value = map[string]int32{
	"BRC_OK":                 0,
	"BRC_BATTLEKEY_ERROR":    1,
	"BRC_ROOM_NOT_EXIST":     2,
	"BRC_CHARID_NOT_IN_ROOM": 3,
	"BRC_OTHER":              100,
}

func (x Type_BattleRetCode) String() string {
	return proto.EnumName(Type_BattleRetCode_name, int32(x))
}
func (Type_BattleRetCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type Type_BattleEndTypeID int32

const (
	Type_BattleEndTypeID_BEC_FINISH Type_BattleEndTypeID = 0
	Type_BattleEndTypeID_BEC_ABORT  Type_BattleEndTypeID = 1
)

var Type_BattleEndTypeID_name = map[int32]string{
	0: "BEC_FINISH",
	1: "BEC_ABORT",
}
var Type_BattleEndTypeID_value = map[string]int32{
	"BEC_FINISH": 0,
	"BEC_ABORT":  1,
}

func (x Type_BattleEndTypeID) String() string {
	return proto.EnumName(Type_BattleEndTypeID_name, int32(x))
}
func (Type_BattleEndTypeID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type BattleMessageType int32

const (
	BattleMessageType_BMT_CHAT_MSG   BattleMessageType = 0
	BattleMessageType_BMT_CHAT_VOICE BattleMessageType = 1
	BattleMessageType_BMT_COMMAND    BattleMessageType = 2
)

var BattleMessageType_name = map[int32]string{
	0: "BMT_CHAT_MSG",
	1: "BMT_CHAT_VOICE",
	2: "BMT_COMMAND",
}
var BattleMessageType_value = map[string]int32{
	"BMT_CHAT_MSG":   0,
	"BMT_CHAT_VOICE": 1,
	"BMT_COMMAND":    2,
}

func (x BattleMessageType) String() string {
	return proto.EnumName(BattleMessageType_name, int32(x))
}
func (BattleMessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type MailInfo_MailType int32

const (
	MailInfo_MT_SYSTEM MailInfo_MailType = 0
	MailInfo_MT_USER   MailInfo_MailType = 1
	MailInfo_MT_GUILD  MailInfo_MailType = 2
)

var MailInfo_MailType_name = map[int32]string{
	0: "MT_SYSTEM",
	1: "MT_USER",
	2: "MT_GUILD",
}
var MailInfo_MailType_value = map[string]int32{
	"MT_SYSTEM": 0,
	"MT_USER":   1,
	"MT_GUILD":  2,
}

func (x MailInfo_MailType) String() string {
	return proto.EnumName(MailInfo_MailType_name, int32(x))
}
func (MailInfo_MailType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{27, 0} }

type Rlt_Asset_Mail_MyMailStatus int32

const (
	Rlt_Asset_Mail_MMS_NONE     Rlt_Asset_Mail_MyMailStatus = 0
	Rlt_Asset_Mail_MMS_READ     Rlt_Asset_Mail_MyMailStatus = 1
	Rlt_Asset_Mail_MMS_RECEIVED Rlt_Asset_Mail_MyMailStatus = 2
)

var Rlt_Asset_Mail_MyMailStatus_name = map[int32]string{
	0: "MMS_NONE",
	1: "MMS_READ",
	2: "MMS_RECEIVED",
}
var Rlt_Asset_Mail_MyMailStatus_value = map[string]int32{
	"MMS_NONE":     0,
	"MMS_READ":     1,
	"MMS_RECEIVED": 2,
}

func (x Rlt_Asset_Mail_MyMailStatus) String() string {
	return proto.EnumName(Rlt_Asset_Mail_MyMailStatus_name, int32(x))
}
func (Rlt_Asset_Mail_MyMailStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 0}
}

type Rlt_Asset_Hero_CharTypeStatus int32

const (
	Rlt_Asset_Hero_RS_OWNED   Rlt_Asset_Hero_CharTypeStatus = 0
	Rlt_Asset_Hero_RS_LIMITED Rlt_Asset_Hero_CharTypeStatus = 1
)

var Rlt_Asset_Hero_CharTypeStatus_name = map[int32]string{
	0: "RS_OWNED",
	1: "RS_LIMITED",
}
var Rlt_Asset_Hero_CharTypeStatus_value = map[string]int32{
	"RS_OWNED":   0,
	"RS_LIMITED": 1,
}

func (x Rlt_Asset_Hero_CharTypeStatus) String() string {
	return proto.EnumName(Rlt_Asset_Hero_CharTypeStatus_name, int32(x))
}
func (Rlt_Asset_Hero_CharTypeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{34, 0}
}

type Rlt_Asset_Achievement_AchievementState int32

const (
	Rlt_Asset_Achievement_AS_NONE     Rlt_Asset_Achievement_AchievementState = 0
	Rlt_Asset_Achievement_AS_ACHIEVED Rlt_Asset_Achievement_AchievementState = 1
)

var Rlt_Asset_Achievement_AchievementState_name = map[int32]string{
	0: "AS_NONE",
	1: "AS_ACHIEVED",
}
var Rlt_Asset_Achievement_AchievementState_value = map[string]int32{
	"AS_NONE":     0,
	"AS_ACHIEVED": 1,
}

func (x Rlt_Asset_Achievement_AchievementState) String() string {
	return proto.EnumName(Rlt_Asset_Achievement_AchievementState_name, int32(x))
}
func (Rlt_Asset_Achievement_AchievementState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37, 0}
}

// /////////////////////////////////////////////
// for test
// /////////////////////////////////////////////
type Ping struct {
	ID uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Pong struct {
	ID uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Req_ServerTime struct {
	Time uint64 `protobuf:"varint,1,opt,name=Time" json:"Time,omitempty"`
}

func (m *Req_ServerTime) Reset()                    { *m = Req_ServerTime{} }
func (m *Req_ServerTime) String() string            { return proto.CompactTextString(m) }
func (*Req_ServerTime) ProtoMessage()               {}
func (*Req_ServerTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Rlt_ServerTime struct {
	Time uint64 `protobuf:"varint,1,opt,name=Time" json:"Time,omitempty"`
}

func (m *Rlt_ServerTime) Reset()                    { *m = Rlt_ServerTime{} }
func (m *Rlt_ServerTime) String() string            { return proto.CompactTextString(m) }
func (*Rlt_ServerTime) ProtoMessage()               {}
func (*Rlt_ServerTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// register and login
type Req_Register struct {
	UserName      string `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	Password      string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
	ClientVersion int32  `protobuf:"varint,3,opt,name=ClientVersion" json:"ClientVersion,omitempty"`
	IsLogin       bool   `protobuf:"varint,4,opt,name=IsLogin" json:"IsLogin,omitempty"`
}

func (m *Req_Register) Reset()                    { *m = Req_Register{} }
func (m *Req_Register) String() string            { return proto.CompactTextString(m) }
func (*Req_Register) ProtoMessage()               {}
func (*Req_Register) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Rlt_Register struct {
	RetCode    Type_LoginRetCode `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_LoginRetCode" json:"RetCode,omitempty"`
	UserID     uint32            `protobuf:"varint,2,opt,name=UserID" json:"UserID,omitempty"`
	SessionKey []byte            `protobuf:"bytes,3,opt,name=SessionKey,proto3" json:"SessionKey,omitempty"`
}

func (m *Rlt_Register) Reset()                    { *m = Rlt_Register{} }
func (m *Rlt_Register) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Register) ProtoMessage()               {}
func (*Rlt_Register) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// req server list
type Req_ServerList struct {
	Channel int32 `protobuf:"varint,1,opt,name=Channel" json:"Channel,omitempty"`
}

func (m *Req_ServerList) Reset()                    { *m = Req_ServerList{} }
func (m *Req_ServerList) String() string            { return proto.CompactTextString(m) }
func (*Req_ServerList) ProtoMessage()               {}
func (*Req_ServerList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Rlt_ServerList struct {
	ServerCount int32                        `protobuf:"varint,1,opt,name=ServerCount" json:"ServerCount,omitempty"`
	ServerList  []*Rlt_ServerList_ServerInfo `protobuf:"bytes,2,rep,name=ServerList" json:"ServerList,omitempty"`
}

func (m *Rlt_ServerList) Reset()                    { *m = Rlt_ServerList{} }
func (m *Rlt_ServerList) String() string            { return proto.CompactTextString(m) }
func (*Rlt_ServerList) ProtoMessage()               {}
func (*Rlt_ServerList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Rlt_ServerList) GetServerList() []*Rlt_ServerList_ServerInfo {
	if m != nil {
		return m.ServerList
	}
	return nil
}

type Rlt_ServerList_ServerInfo struct {
	ServerID    int32  `protobuf:"varint,1,opt,name=ServerID" json:"ServerID,omitempty"`
	ServerName  string `protobuf:"bytes,2,opt,name=ServerName" json:"ServerName,omitempty"`
	Status      int32  `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty"`
	ConnectAddr string `protobuf:"bytes,4,opt,name=ConnectAddr" json:"ConnectAddr,omitempty"`
	AreaName    string `protobuf:"bytes,5,opt,name=AreaName" json:"AreaName,omitempty"`
}

func (m *Rlt_ServerList_ServerInfo) Reset()                    { *m = Rlt_ServerList_ServerInfo{} }
func (m *Rlt_ServerList_ServerInfo) String() string            { return proto.CompactTextString(m) }
func (*Rlt_ServerList_ServerInfo) ProtoMessage()               {}
func (*Rlt_ServerList_ServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type Req_Login struct {
	UserID     uint32 `protobuf:"varint,1,opt,name=UserID" json:"UserID,omitempty"`
	SessionKey []byte `protobuf:"bytes,2,opt,name=SessionKey,proto3" json:"SessionKey,omitempty"`
	ServerID   int32  `protobuf:"varint,3,opt,name=ServerID" json:"ServerID,omitempty"`
}

func (m *Req_Login) Reset()                    { *m = Req_Login{} }
func (m *Req_Login) String() string            { return proto.CompactTextString(m) }
func (*Req_Login) ProtoMessage()               {}
func (*Req_Login) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Rlt_Login struct {
	RetCode        Type_GameRetCode `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_GameRetCode" json:"RetCode,omitempty"`
	CharID         uint32           `protobuf:"varint,2,opt,name=CharID" json:"CharID,omitempty"`
	IsNewCharacter bool             `protobuf:"varint,3,opt,name=IsNewCharacter" json:"IsNewCharacter,omitempty"`
	CharName       string           `protobuf:"bytes,4,opt,name=CharName" json:"CharName,omitempty"`
}

func (m *Rlt_Login) Reset()                    { *m = Rlt_Login{} }
func (m *Rlt_Login) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Login) ProtoMessage()               {}
func (*Rlt_Login) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type Req_Re_ConnectGS struct {
	CharID     uint32 `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	SessionKey []byte `protobuf:"bytes,2,opt,name=SessionKey,proto3" json:"SessionKey,omitempty"`
}

func (m *Req_Re_ConnectGS) Reset()                    { *m = Req_Re_ConnectGS{} }
func (m *Req_Re_ConnectGS) String() string            { return proto.CompactTextString(m) }
func (*Req_Re_ConnectGS) ProtoMessage()               {}
func (*Req_Re_ConnectGS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type Rlt_Re_ConnectGS struct {
	RetCode Type_GameRetCode `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_GameRetCode" json:"RetCode,omitempty"`
}

func (m *Rlt_Re_ConnectGS) Reset()                    { *m = Rlt_Re_ConnectGS{} }
func (m *Rlt_Re_ConnectGS) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Re_ConnectGS) ProtoMessage()               {}
func (*Rlt_Re_ConnectGS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type Req_SetCharName struct {
	CharName string `protobuf:"bytes,1,opt,name=CharName" json:"CharName,omitempty"`
}

func (m *Req_SetCharName) Reset()                    { *m = Req_SetCharName{} }
func (m *Req_SetCharName) String() string            { return proto.CompactTextString(m) }
func (*Req_SetCharName) ProtoMessage()               {}
func (*Req_SetCharName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type Rlt_SetCharName struct {
	RetCode  Type_GameRetCode `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_GameRetCode" json:"RetCode,omitempty"`
	CharName string           `protobuf:"bytes,2,opt,name=CharName" json:"CharName,omitempty"`
}

func (m *Rlt_SetCharName) Reset()                    { *m = Rlt_SetCharName{} }
func (m *Rlt_SetCharName) String() string            { return proto.CompactTextString(m) }
func (*Rlt_SetCharName) ProtoMessage()               {}
func (*Rlt_SetCharName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type Req_Match struct {
	Action MatchActionType `protobuf:"varint,1,opt,name=Action,enum=clientmsg.MatchActionType" json:"Action,omitempty"`
	Mode   MatchModeType   `protobuf:"varint,2,opt,name=Mode,enum=clientmsg.MatchModeType" json:"Mode,omitempty"`
	MapID  int32           `protobuf:"varint,3,opt,name=MapID" json:"MapID,omitempty"`
}

func (m *Req_Match) Reset()                    { *m = Req_Match{} }
func (m *Req_Match) String() string            { return proto.CompactTextString(m) }
func (*Req_Match) ProtoMessage()               {}
func (*Req_Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type Rlt_Match struct {
	RetCode       Type_GameRetCode        `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_GameRetCode" json:"RetCode,omitempty"`
	Members       []*Rlt_Match_MemberInfo `protobuf:"bytes,2,rep,name=Members" json:"Members,omitempty"`
	WaitUntilTime int64                   `protobuf:"varint,3,opt,name=WaitUntilTime" json:"WaitUntilTime,omitempty"`
}

func (m *Rlt_Match) Reset()                    { *m = Rlt_Match{} }
func (m *Rlt_Match) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Match) ProtoMessage()               {}
func (*Rlt_Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Rlt_Match) GetMembers() []*Rlt_Match_MemberInfo {
	if m != nil {
		return m.Members
	}
	return nil
}

type Rlt_Match_MemberInfo struct {
	CharID   uint32       `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	CharName string       `protobuf:"bytes,2,opt,name=CharName" json:"CharName,omitempty"`
	TeamID   int32        `protobuf:"varint,3,opt,name=TeamID" json:"TeamID,omitempty"`
	OwnerID  uint32       `protobuf:"varint,4,opt,name=OwnerID" json:"OwnerID,omitempty"`
	CharType int32        `protobuf:"varint,5,opt,name=CharType" json:"CharType,omitempty"`
	Status   MemberStatus `protobuf:"varint,6,opt,name=Status,enum=clientmsg.MemberStatus" json:"Status,omitempty"`
}

func (m *Rlt_Match_MemberInfo) Reset()                    { *m = Rlt_Match_MemberInfo{} }
func (m *Rlt_Match_MemberInfo) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Match_MemberInfo) ProtoMessage()               {}
func (*Rlt_Match_MemberInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 0} }

type Transfer_Team_Operate struct {
	Action   TeamOperateActionType `protobuf:"varint,1,opt,name=Action,enum=clientmsg.TeamOperateActionType" json:"Action,omitempty"`
	CharID   uint32                `protobuf:"varint,2,opt,name=CharID" json:"CharID,omitempty"`
	CharType int32                 `protobuf:"varint,3,opt,name=CharType" json:"CharType,omitempty"`
}

func (m *Transfer_Team_Operate) Reset()                    { *m = Transfer_Team_Operate{} }
func (m *Transfer_Team_Operate) String() string            { return proto.CompactTextString(m) }
func (*Transfer_Team_Operate) ProtoMessage()               {}
func (*Transfer_Team_Operate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type Rlt_NotifyBattleAddress struct {
	RoomID         int32  `protobuf:"varint,1,opt,name=RoomID" json:"RoomID,omitempty"`
	BattleAddr     string `protobuf:"bytes,2,opt,name=BattleAddr" json:"BattleAddr,omitempty"`
	BattleKey      []byte `protobuf:"bytes,3,opt,name=BattleKey,proto3" json:"BattleKey,omitempty"`
	BattleServerID int32  `protobuf:"varint,4,opt,name=BattleServerID" json:"BattleServerID,omitempty"`
}

func (m *Rlt_NotifyBattleAddress) Reset()                    { *m = Rlt_NotifyBattleAddress{} }
func (m *Rlt_NotifyBattleAddress) String() string            { return proto.CompactTextString(m) }
func (*Rlt_NotifyBattleAddress) ProtoMessage()               {}
func (*Rlt_NotifyBattleAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type Req_Friend_Operate struct {
	Action        FriendOperateActionType `protobuf:"varint,1,opt,name=Action,enum=clientmsg.FriendOperateActionType" json:"Action,omitempty"`
	SearchName    string                  `protobuf:"bytes,2,opt,name=SearchName" json:"SearchName,omitempty"`
	OperateCharID uint32                  `protobuf:"varint,3,opt,name=OperateCharID" json:"OperateCharID,omitempty"`
	Message       string                  `protobuf:"bytes,4,opt,name=Message" json:"Message,omitempty"`
}

func (m *Req_Friend_Operate) Reset()                    { *m = Req_Friend_Operate{} }
func (m *Req_Friend_Operate) String() string            { return proto.CompactTextString(m) }
func (*Req_Friend_Operate) ProtoMessage()               {}
func (*Req_Friend_Operate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type Rlt_Friend_Operate struct {
	RetCode         Type_GameRetCode        `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_GameRetCode" json:"RetCode,omitempty"`
	Action          FriendOperateActionType `protobuf:"varint,2,opt,name=Action,enum=clientmsg.FriendOperateActionType" json:"Action,omitempty"`
	SearchedCharIDs []uint32                `protobuf:"varint,3,rep,name=SearchedCharIDs" json:"SearchedCharIDs,omitempty"`
}

func (m *Rlt_Friend_Operate) Reset()                    { *m = Rlt_Friend_Operate{} }
func (m *Rlt_Friend_Operate) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Friend_Operate) ProtoMessage()               {}
func (*Rlt_Friend_Operate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type Req_Chat struct {
	Channel     ChatChannelType `protobuf:"varint,1,opt,name=Channel,enum=clientmsg.ChatChannelType" json:"Channel,omitempty"`
	TargetID    uint32          `protobuf:"varint,2,opt,name=TargetID" json:"TargetID,omitempty"`
	MessageType uint32          `protobuf:"varint,3,opt,name=MessageType" json:"MessageType,omitempty"`
	MessageData string          `protobuf:"bytes,4,opt,name=MessageData" json:"MessageData,omitempty"`
}

func (m *Req_Chat) Reset()                    { *m = Req_Chat{} }
func (m *Req_Chat) String() string            { return proto.CompactTextString(m) }
func (*Req_Chat) ProtoMessage()               {}
func (*Req_Chat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type Rlt_Chat struct {
	Channel     ChatChannelType `protobuf:"varint,1,opt,name=Channel,enum=clientmsg.ChatChannelType" json:"Channel,omitempty"`
	TargetID    uint32          `protobuf:"varint,2,opt,name=TargetID" json:"TargetID,omitempty"`
	MessageType uint32          `protobuf:"varint,3,opt,name=MessageType" json:"MessageType,omitempty"`
	MessageData string          `protobuf:"bytes,4,opt,name=MessageData" json:"MessageData,omitempty"`
	SenderID    uint32          `protobuf:"varint,5,opt,name=SenderID" json:"SenderID,omitempty"`
}

func (m *Rlt_Chat) Reset()                    { *m = Rlt_Chat{} }
func (m *Rlt_Chat) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Chat) ProtoMessage()               {}
func (*Rlt_Chat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type Req_QueryCharInfo struct {
	CharIDs []uint32 `protobuf:"varint,1,rep,name=CharIDs" json:"CharIDs,omitempty"`
}

func (m *Req_QueryCharInfo) Reset()                    { *m = Req_QueryCharInfo{} }
func (m *Req_QueryCharInfo) String() string            { return proto.CompactTextString(m) }
func (*Req_QueryCharInfo) ProtoMessage()               {}
func (*Req_QueryCharInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type Rlt_QueryCharInfo struct {
	RetCode  Type_GameRetCode                   `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_GameRetCode" json:"RetCode,omitempty"`
	UserInfo []*Rlt_QueryCharInfo_UserBasicInfo `protobuf:"bytes,2,rep,name=UserInfo" json:"UserInfo,omitempty"`
}

func (m *Rlt_QueryCharInfo) Reset()                    { *m = Rlt_QueryCharInfo{} }
func (m *Rlt_QueryCharInfo) String() string            { return proto.CompactTextString(m) }
func (*Rlt_QueryCharInfo) ProtoMessage()               {}
func (*Rlt_QueryCharInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Rlt_QueryCharInfo) GetUserInfo() []*Rlt_QueryCharInfo_UserBasicInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type Rlt_QueryCharInfo_UserBasicInfo struct {
	CharID   uint32     `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	CharName string     `protobuf:"bytes,2,opt,name=CharName" json:"CharName,omitempty"`
	Status   UserStatus `protobuf:"varint,3,opt,name=Status,enum=clientmsg.UserStatus" json:"Status,omitempty"`
}

func (m *Rlt_QueryCharInfo_UserBasicInfo) Reset()         { *m = Rlt_QueryCharInfo_UserBasicInfo{} }
func (m *Rlt_QueryCharInfo_UserBasicInfo) String() string { return proto.CompactTextString(m) }
func (*Rlt_QueryCharInfo_UserBasicInfo) ProtoMessage()    {}
func (*Rlt_QueryCharInfo_UserBasicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23, 0}
}

type Req_MakeTeamOperate struct {
	Action        MakeTeamOperateType `protobuf:"varint,1,opt,name=Action,enum=clientmsg.MakeTeamOperateType" json:"Action,omitempty"`
	TargetID      uint32              `protobuf:"varint,2,opt,name=TargetID" json:"TargetID,omitempty"`
	TableID       int32               `protobuf:"varint,3,opt,name=TableID" json:"TableID,omitempty"`
	MatchServerID int32               `protobuf:"varint,4,opt,name=MatchServerID" json:"MatchServerID,omitempty"`
}

func (m *Req_MakeTeamOperate) Reset()                    { *m = Req_MakeTeamOperate{} }
func (m *Req_MakeTeamOperate) String() string            { return proto.CompactTextString(m) }
func (*Req_MakeTeamOperate) ProtoMessage()               {}
func (*Req_MakeTeamOperate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type Rlt_MakeTeamOperate struct {
	RetCode       Type_GameRetCode                      `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_GameRetCode" json:"RetCode,omitempty"`
	Action        MakeTeamOperateType                   `protobuf:"varint,2,opt,name=Action,enum=clientmsg.MakeTeamOperateType" json:"Action,omitempty"`
	TargetID      uint32                                `protobuf:"varint,3,opt,name=TargetID" json:"TargetID,omitempty"`
	TableID       int32                                 `protobuf:"varint,4,opt,name=TableID" json:"TableID,omitempty"`
	MatchServerID int32                                 `protobuf:"varint,5,opt,name=MatchServerID" json:"MatchServerID,omitempty"`
	InviterID     int32                                 `protobuf:"varint,6,opt,name=InviterID" json:"InviterID,omitempty"`
	Member        []*Rlt_MakeTeamOperate_TeamMemberInfo `protobuf:"bytes,7,rep,name=Member" json:"Member,omitempty"`
}

func (m *Rlt_MakeTeamOperate) Reset()                    { *m = Rlt_MakeTeamOperate{} }
func (m *Rlt_MakeTeamOperate) String() string            { return proto.CompactTextString(m) }
func (*Rlt_MakeTeamOperate) ProtoMessage()               {}
func (*Rlt_MakeTeamOperate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Rlt_MakeTeamOperate) GetMember() []*Rlt_MakeTeamOperate_TeamMemberInfo {
	if m != nil {
		return m.Member
	}
	return nil
}

type Rlt_MakeTeamOperate_TeamMemberInfo struct {
	CharID   uint32 `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	CharName string `protobuf:"bytes,2,opt,name=CharName" json:"CharName,omitempty"`
	Position uint32 `protobuf:"varint,3,opt,name=Position" json:"Position,omitempty"`
}

func (m *Rlt_MakeTeamOperate_TeamMemberInfo) Reset()         { *m = Rlt_MakeTeamOperate_TeamMemberInfo{} }
func (m *Rlt_MakeTeamOperate_TeamMemberInfo) String() string { return proto.CompactTextString(m) }
func (*Rlt_MakeTeamOperate_TeamMemberInfo) ProtoMessage()    {}
func (*Rlt_MakeTeamOperate_TeamMemberInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25, 0}
}

type Rlt_Give_Reward struct {
	Rewardlist []*Rlt_Give_Reward_Reward `protobuf:"bytes,1,rep,name=rewardlist" json:"rewardlist,omitempty"`
}

func (m *Rlt_Give_Reward) Reset()                    { *m = Rlt_Give_Reward{} }
func (m *Rlt_Give_Reward) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Give_Reward) ProtoMessage()               {}
func (*Rlt_Give_Reward) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Rlt_Give_Reward) GetRewardlist() []*Rlt_Give_Reward_Reward {
	if m != nil {
		return m.Rewardlist
	}
	return nil
}

type Rlt_Give_Reward_Reward struct {
	X int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Z int32 `protobuf:"varint,3,opt,name=z" json:"z,omitempty"`
}

func (m *Rlt_Give_Reward_Reward) Reset()                    { *m = Rlt_Give_Reward_Reward{} }
func (m *Rlt_Give_Reward_Reward) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Give_Reward_Reward) ProtoMessage()               {}
func (*Rlt_Give_Reward_Reward) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26, 0} }

type MailInfo struct {
	Mailid      string            `protobuf:"bytes,1,opt,name=Mailid" json:"Mailid,omitempty"`
	Mailownerid uint32            `protobuf:"varint,2,opt,name=Mailownerid" json:"Mailownerid,omitempty"`
	Mailtype    MailInfo_MailType `protobuf:"varint,3,opt,name=Mailtype,enum=clientmsg.MailInfo_MailType" json:"Mailtype,omitempty"`
	Title       string            `protobuf:"bytes,4,opt,name=Title" json:"Title,omitempty"`
	Content     string            `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty"`
	Rewards     *Rlt_Give_Reward  `protobuf:"bytes,6,opt,name=Rewards" json:"Rewards,omitempty"`
	CreateTime  int64             `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty"`
	ExpireTime  int64             `protobuf:"varint,8,opt,name=ExpireTime" json:"ExpireTime,omitempty"`
}

func (m *MailInfo) Reset()                    { *m = MailInfo{} }
func (m *MailInfo) String() string            { return proto.CompactTextString(m) }
func (*MailInfo) ProtoMessage()               {}
func (*MailInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *MailInfo) GetRewards() *Rlt_Give_Reward {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type Req_Mail_Action struct {
	Action  MailActionType `protobuf:"varint,1,opt,name=Action,enum=clientmsg.MailActionType" json:"Action,omitempty"`
	MailIDs []string       `protobuf:"bytes,2,rep,name=MailIDs" json:"MailIDs,omitempty"`
}

func (m *Req_Mail_Action) Reset()                    { *m = Req_Mail_Action{} }
func (m *Req_Mail_Action) String() string            { return proto.CompactTextString(m) }
func (*Req_Mail_Action) ProtoMessage()               {}
func (*Req_Mail_Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type Rlt_Mail_Action struct {
	RetCode Type_GameRetCode `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_GameRetCode" json:"RetCode,omitempty"`
	Action  MailActionType   `protobuf:"varint,2,opt,name=Action,enum=clientmsg.MailActionType" json:"Action,omitempty"`
	Mails   []*MailInfo      `protobuf:"bytes,3,rep,name=Mails" json:"Mails,omitempty"`
}

func (m *Rlt_Mail_Action) Reset()                    { *m = Rlt_Mail_Action{} }
func (m *Rlt_Mail_Action) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Mail_Action) ProtoMessage()               {}
func (*Rlt_Mail_Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *Rlt_Mail_Action) GetMails() []*MailInfo {
	if m != nil {
		return m.Mails
	}
	return nil
}

type Rlt_Asset_Friend struct {
	CharID    uint32                        `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	Friends   []uint32                      `protobuf:"varint,2,rep,name=Friends" json:"Friends,omitempty"`
	ApplyList []*Rlt_Asset_Friend_ApplyInfo `protobuf:"bytes,3,rep,name=ApplyList" json:"ApplyList,omitempty"`
}

func (m *Rlt_Asset_Friend) Reset()                    { *m = Rlt_Asset_Friend{} }
func (m *Rlt_Asset_Friend) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Asset_Friend) ProtoMessage()               {}
func (*Rlt_Asset_Friend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *Rlt_Asset_Friend) GetApplyList() []*Rlt_Asset_Friend_ApplyInfo {
	if m != nil {
		return m.ApplyList
	}
	return nil
}

type Rlt_Asset_Friend_ApplyInfo struct {
	FromID uint32              `protobuf:"varint,1,opt,name=FromID" json:"FromID,omitempty"`
	Msg    *Req_Friend_Operate `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *Rlt_Asset_Friend_ApplyInfo) Reset()                    { *m = Rlt_Asset_Friend_ApplyInfo{} }
func (m *Rlt_Asset_Friend_ApplyInfo) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Asset_Friend_ApplyInfo) ProtoMessage()               {}
func (*Rlt_Asset_Friend_ApplyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30, 0} }

func (m *Rlt_Asset_Friend_ApplyInfo) GetMsg() *Req_Friend_Operate {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Rlt_Asset_Cash struct {
	CharID                uint32 `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	Level                 uint32 `protobuf:"varint,2,opt,name=Level" json:"Level,omitempty"`
	Exp                   uint32 `protobuf:"varint,3,opt,name=Exp" json:"Exp,omitempty"`
	LastCheckGlobalMailTs int64  `protobuf:"varint,4,opt,name=LastCheckGlobalMailTs" json:"LastCheckGlobalMailTs,omitempty"`
	GoldCoin              uint32 `protobuf:"varint,5,opt,name=GoldCoin" json:"GoldCoin,omitempty"`
	SilverCoin            uint32 `protobuf:"varint,6,opt,name=SilverCoin" json:"SilverCoin,omitempty"`
	Diamond               uint32 `protobuf:"varint,7,opt,name=Diamond" json:"Diamond,omitempty"`
}

func (m *Rlt_Asset_Cash) Reset()                    { *m = Rlt_Asset_Cash{} }
func (m *Rlt_Asset_Cash) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Asset_Cash) ProtoMessage()               {}
func (*Rlt_Asset_Cash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type Rlt_Asset_Mail struct {
	CharID        uint32                       `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	MailData      []*Rlt_Asset_Mail_MyMailData `protobuf:"bytes,2,rep,name=MailData" json:"MailData,omitempty"`
	MailIDExclude []string                     `protobuf:"bytes,3,rep,name=MailIDExclude" json:"MailIDExclude,omitempty"`
}

func (m *Rlt_Asset_Mail) Reset()                    { *m = Rlt_Asset_Mail{} }
func (m *Rlt_Asset_Mail) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Asset_Mail) ProtoMessage()               {}
func (*Rlt_Asset_Mail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *Rlt_Asset_Mail) GetMailData() []*Rlt_Asset_Mail_MyMailData {
	if m != nil {
		return m.MailData
	}
	return nil
}

type Rlt_Asset_Mail_MyMailData struct {
	MailID     string                      `protobuf:"bytes,1,opt,name=MailID" json:"MailID,omitempty"`
	MailStatus Rlt_Asset_Mail_MyMailStatus `protobuf:"varint,2,opt,name=MailStatus,enum=clientmsg.Rlt_Asset_Mail_MyMailStatus" json:"MailStatus,omitempty"`
	CreateTime int64                       `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty"`
}

func (m *Rlt_Asset_Mail_MyMailData) Reset()                    { *m = Rlt_Asset_Mail_MyMailData{} }
func (m *Rlt_Asset_Mail_MyMailData) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Asset_Mail_MyMailData) ProtoMessage()               {}
func (*Rlt_Asset_Mail_MyMailData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32, 0} }

type Rlt_Asset_Item struct {
	CharID uint32 `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
}

func (m *Rlt_Asset_Item) Reset()                    { *m = Rlt_Asset_Item{} }
func (m *Rlt_Asset_Item) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Asset_Item) ProtoMessage()               {}
func (*Rlt_Asset_Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

type Rlt_Asset_Hero struct {
	CharID uint32                     `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	Roles  []*Rlt_Asset_Hero_RoleInfo `protobuf:"bytes,2,rep,name=Roles" json:"Roles,omitempty"`
}

func (m *Rlt_Asset_Hero) Reset()                    { *m = Rlt_Asset_Hero{} }
func (m *Rlt_Asset_Hero) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Asset_Hero) ProtoMessage()               {}
func (*Rlt_Asset_Hero) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Rlt_Asset_Hero) GetRoles() []*Rlt_Asset_Hero_RoleInfo {
	if m != nil {
		return m.Roles
	}
	return nil
}

type Rlt_Asset_Hero_RoleInfo struct {
	CharTypeID   uint32                        `protobuf:"varint,1,opt,name=CharTypeID" json:"CharTypeID,omitempty"`
	RoleStatus   Rlt_Asset_Hero_CharTypeStatus `protobuf:"varint,2,opt,name=RoleStatus,enum=clientmsg.Rlt_Asset_Hero_CharTypeStatus" json:"RoleStatus,omitempty"`
	OwnedTime    int64                         `protobuf:"varint,3,opt,name=OwnedTime" json:"OwnedTime,omitempty"`
	DeadLineTime int64                         `protobuf:"varint,4,opt,name=DeadLineTime" json:"DeadLineTime,omitempty"`
}

func (m *Rlt_Asset_Hero_RoleInfo) Reset()                    { *m = Rlt_Asset_Hero_RoleInfo{} }
func (m *Rlt_Asset_Hero_RoleInfo) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Asset_Hero_RoleInfo) ProtoMessage()               {}
func (*Rlt_Asset_Hero_RoleInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34, 0} }

type Rlt_Asset_Tutorial struct {
	CharID uint32 `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
}

func (m *Rlt_Asset_Tutorial) Reset()                    { *m = Rlt_Asset_Tutorial{} }
func (m *Rlt_Asset_Tutorial) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Asset_Tutorial) ProtoMessage()               {}
func (*Rlt_Asset_Tutorial) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

type Rlt_Asset_Statistic struct {
	CharID uint32 `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
}

func (m *Rlt_Asset_Statistic) Reset()                    { *m = Rlt_Asset_Statistic{} }
func (m *Rlt_Asset_Statistic) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Asset_Statistic) ProtoMessage()               {}
func (*Rlt_Asset_Statistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

type Rlt_Asset_Achievement struct {
	CharID      uint32                                   `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	AchieveData []*Rlt_Asset_Achievement_AchievementInfo `protobuf:"bytes,2,rep,name=AchieveData" json:"AchieveData,omitempty"`
	AccuData    []*Rlt_Asset_Achievement_AccumulateInfo  `protobuf:"bytes,3,rep,name=AccuData" json:"AccuData,omitempty"`
}

func (m *Rlt_Asset_Achievement) Reset()                    { *m = Rlt_Asset_Achievement{} }
func (m *Rlt_Asset_Achievement) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Asset_Achievement) ProtoMessage()               {}
func (*Rlt_Asset_Achievement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *Rlt_Asset_Achievement) GetAchieveData() []*Rlt_Asset_Achievement_AchievementInfo {
	if m != nil {
		return m.AchieveData
	}
	return nil
}

func (m *Rlt_Asset_Achievement) GetAccuData() []*Rlt_Asset_Achievement_AccumulateInfo {
	if m != nil {
		return m.AccuData
	}
	return nil
}

type Rlt_Asset_Achievement_AccumulateInfo struct {
	ID    int32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *Rlt_Asset_Achievement_AccumulateInfo) Reset()         { *m = Rlt_Asset_Achievement_AccumulateInfo{} }
func (m *Rlt_Asset_Achievement_AccumulateInfo) String() string { return proto.CompactTextString(m) }
func (*Rlt_Asset_Achievement_AccumulateInfo) ProtoMessage()    {}
func (*Rlt_Asset_Achievement_AccumulateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37, 0}
}

type Rlt_Asset_Achievement_AchievementInfo struct {
	ID       int32                                  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	State    Rlt_Asset_Achievement_AchievementState `protobuf:"varint,2,opt,name=State,enum=clientmsg.Rlt_Asset_Achievement_AchievementState" json:"State,omitempty"`
	Progress int32                                  `protobuf:"varint,3,opt,name=Progress" json:"Progress,omitempty"`
	Total    int32                                  `protobuf:"varint,4,opt,name=Total" json:"Total,omitempty"`
}

func (m *Rlt_Asset_Achievement_AchievementInfo) Reset()         { *m = Rlt_Asset_Achievement_AchievementInfo{} }
func (m *Rlt_Asset_Achievement_AchievementInfo) String() string { return proto.CompactTextString(m) }
func (*Rlt_Asset_Achievement_AchievementInfo) ProtoMessage()    {}
func (*Rlt_Asset_Achievement_AchievementInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37, 1}
}

type Rlt_Asset_Task struct {
	CharID uint32 `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
}

func (m *Rlt_Asset_Task) Reset()                    { *m = Rlt_Asset_Task{} }
func (m *Rlt_Asset_Task) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Asset_Task) ProtoMessage()               {}
func (*Rlt_Asset_Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

type Req_ConnectBS struct {
	RoomID    int32  `protobuf:"varint,1,opt,name=RoomID" json:"RoomID,omitempty"`
	BattleKey []byte `protobuf:"bytes,2,opt,name=BattleKey,proto3" json:"BattleKey,omitempty"`
	CharID    uint32 `protobuf:"varint,3,opt,name=CharID" json:"CharID,omitempty"`
}

func (m *Req_ConnectBS) Reset()                    { *m = Req_ConnectBS{} }
func (m *Req_ConnectBS) String() string            { return proto.CompactTextString(m) }
func (*Req_ConnectBS) ProtoMessage()               {}
func (*Req_ConnectBS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

type Rlt_ConnectBS struct {
	RetCode     Type_BattleRetCode          `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_BattleRetCode" json:"RetCode,omitempty"`
	MapID       int32                       `protobuf:"varint,2,opt,name=MapID" json:"MapID,omitempty"`
	Member      []*Rlt_ConnectBS_MemberInfo `protobuf:"bytes,3,rep,name=Member" json:"Member,omitempty"`
	IsReconnect bool                        `protobuf:"varint,4,opt,name=IsReconnect" json:"IsReconnect,omitempty"`
}

func (m *Rlt_ConnectBS) Reset()                    { *m = Rlt_ConnectBS{} }
func (m *Rlt_ConnectBS) String() string            { return proto.CompactTextString(m) }
func (*Rlt_ConnectBS) ProtoMessage()               {}
func (*Rlt_ConnectBS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Rlt_ConnectBS) GetMember() []*Rlt_ConnectBS_MemberInfo {
	if m != nil {
		return m.Member
	}
	return nil
}

type Rlt_ConnectBS_MemberInfo struct {
	CharID   uint32 `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	CharName string `protobuf:"bytes,2,opt,name=CharName" json:"CharName,omitempty"`
	CharType int32  `protobuf:"varint,3,opt,name=CharType" json:"CharType,omitempty"`
	TeamID   int32  `protobuf:"varint,4,opt,name=TeamID" json:"TeamID,omitempty"`
	OwnerID  uint32 `protobuf:"varint,5,opt,name=OwnerID" json:"OwnerID,omitempty"`
}

func (m *Rlt_ConnectBS_MemberInfo) Reset()                    { *m = Rlt_ConnectBS_MemberInfo{} }
func (m *Rlt_ConnectBS_MemberInfo) String() string            { return proto.CompactTextString(m) }
func (*Rlt_ConnectBS_MemberInfo) ProtoMessage()               {}
func (*Rlt_ConnectBS_MemberInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40, 0} }

type Req_Re_ConnectBS struct {
	BattleKey []byte `protobuf:"bytes,1,opt,name=BattleKey,proto3" json:"BattleKey,omitempty"`
	CharID    uint32 `protobuf:"varint,2,opt,name=CharID" json:"CharID,omitempty"`
	FrameID   uint32 `protobuf:"varint,3,opt,name=FrameID" json:"FrameID,omitempty"`
}

func (m *Req_Re_ConnectBS) Reset()                    { *m = Req_Re_ConnectBS{} }
func (m *Req_Re_ConnectBS) String() string            { return proto.CompactTextString(m) }
func (*Req_Re_ConnectBS) ProtoMessage()               {}
func (*Req_Re_ConnectBS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

type Rlt_StartBattle struct {
	RandSeed int32 `protobuf:"varint,1,opt,name=RandSeed" json:"RandSeed,omitempty"`
}

func (m *Rlt_StartBattle) Reset()                    { *m = Rlt_StartBattle{} }
func (m *Rlt_StartBattle) String() string            { return proto.CompactTextString(m) }
func (*Rlt_StartBattle) ProtoMessage()               {}
func (*Rlt_StartBattle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

type Transfer_Command struct {
	FrameID  uint32                          `protobuf:"varint,1,opt,name=FrameID" json:"FrameID,omitempty"`
	Messages []*Transfer_Command_CommandData `protobuf:"bytes,2,rep,name=Messages" json:"Messages,omitempty"`
}

func (m *Transfer_Command) Reset()                    { *m = Transfer_Command{} }
func (m *Transfer_Command) String() string            { return proto.CompactTextString(m) }
func (*Transfer_Command) ProtoMessage()               {}
func (*Transfer_Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *Transfer_Command) GetMessages() []*Transfer_Command_CommandData {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Transfer_Command_CommandData struct {
	CharID  uint32 `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	Msgdata []byte `protobuf:"bytes,2,opt,name=msgdata,proto3" json:"msgdata,omitempty"`
}

func (m *Transfer_Command_CommandData) Reset()         { *m = Transfer_Command_CommandData{} }
func (m *Transfer_Command_CommandData) String() string { return proto.CompactTextString(m) }
func (*Transfer_Command_CommandData) ProtoMessage()    {}
func (*Transfer_Command_CommandData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{43, 0}
}

type Req_EndBattle struct {
	TypeID Type_BattleEndTypeID `protobuf:"varint,1,opt,name=TypeID,enum=clientmsg.Type_BattleEndTypeID" json:"TypeID,omitempty"`
	CharID uint32               `protobuf:"varint,2,opt,name=CharID" json:"CharID,omitempty"`
}

func (m *Req_EndBattle) Reset()                    { *m = Req_EndBattle{} }
func (m *Req_EndBattle) String() string            { return proto.CompactTextString(m) }
func (*Req_EndBattle) ProtoMessage()               {}
func (*Req_EndBattle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

type Rlt_EndBattle struct {
	RetCode Type_BattleRetCode `protobuf:"varint,1,opt,name=RetCode,enum=clientmsg.Type_BattleRetCode" json:"RetCode,omitempty"`
	CharID  uint32             `protobuf:"varint,2,opt,name=CharID" json:"CharID,omitempty"`
}

func (m *Rlt_EndBattle) Reset()                    { *m = Rlt_EndBattle{} }
func (m *Rlt_EndBattle) String() string            { return proto.CompactTextString(m) }
func (*Rlt_EndBattle) ProtoMessage()               {}
func (*Rlt_EndBattle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

type Transfer_Loading_Progress struct {
	CharID   uint32 `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	Progress int32  `protobuf:"varint,2,opt,name=Progress" json:"Progress,omitempty"`
}

func (m *Transfer_Loading_Progress) Reset()                    { *m = Transfer_Loading_Progress{} }
func (m *Transfer_Loading_Progress) String() string            { return proto.CompactTextString(m) }
func (*Transfer_Loading_Progress) ProtoMessage()               {}
func (*Transfer_Loading_Progress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

type Transfer_Battle_Message struct {
	MessageType BattleMessageType `protobuf:"varint,1,opt,name=MessageType,enum=clientmsg.BattleMessageType" json:"MessageType,omitempty"`
	CommandID   uint32            `protobuf:"varint,2,opt,name=CommandID" json:"CommandID,omitempty"`
	ToTeamID    uint32            `protobuf:"varint,3,opt,name=ToTeamID" json:"ToTeamID,omitempty"`
	FromCharID  uint32            `protobuf:"varint,4,opt,name=FromCharID" json:"FromCharID,omitempty"`
	MessageData string            `protobuf:"bytes,5,opt,name=MessageData" json:"MessageData,omitempty"`
}

func (m *Transfer_Battle_Message) Reset()                    { *m = Transfer_Battle_Message{} }
func (m *Transfer_Battle_Message) String() string            { return proto.CompactTextString(m) }
func (*Transfer_Battle_Message) ProtoMessage()               {}
func (*Transfer_Battle_Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

type Rlt_Continue_Battle struct {
	CharID     uint32 `protobuf:"varint,1,opt,name=CharID" json:"CharID,omitempty"`
	RoomID     int32  `protobuf:"varint,2,opt,name=RoomID" json:"RoomID,omitempty"`
	BattleKey  []byte `protobuf:"bytes,3,opt,name=BattleKey,proto3" json:"BattleKey,omitempty"`
	BattleAddr string `protobuf:"bytes,4,opt,name=BattleAddr" json:"BattleAddr,omitempty"`
}

func (m *Rlt_Continue_Battle) Reset()                    { *m = Rlt_Continue_Battle{} }
func (m *Rlt_Continue_Battle) String() string            { return proto.CompactTextString(m) }
func (*Rlt_Continue_Battle) ProtoMessage()               {}
func (*Rlt_Continue_Battle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

type Transfer_Battle_Heartbeat struct {
	TickTime uint64 `protobuf:"varint,1,opt,name=TickTime" json:"TickTime,omitempty"`
}

func (m *Transfer_Battle_Heartbeat) Reset()                    { *m = Transfer_Battle_Heartbeat{} }
func (m *Transfer_Battle_Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Transfer_Battle_Heartbeat) ProtoMessage()               {}
func (*Transfer_Battle_Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func init() {
	proto.RegisterType((*Ping)(nil), "clientmsg.Ping")
	proto.RegisterType((*Pong)(nil), "clientmsg.Pong")
	proto.RegisterType((*Req_ServerTime)(nil), "clientmsg.Req_ServerTime")
	proto.RegisterType((*Rlt_ServerTime)(nil), "clientmsg.Rlt_ServerTime")
	proto.RegisterType((*Req_Register)(nil), "clientmsg.Req_Register")
	proto.RegisterType((*Rlt_Register)(nil), "clientmsg.Rlt_Register")
	proto.RegisterType((*Req_ServerList)(nil), "clientmsg.Req_ServerList")
	proto.RegisterType((*Rlt_ServerList)(nil), "clientmsg.Rlt_ServerList")
	proto.RegisterType((*Rlt_ServerList_ServerInfo)(nil), "clientmsg.Rlt_ServerList.ServerInfo")
	proto.RegisterType((*Req_Login)(nil), "clientmsg.Req_Login")
	proto.RegisterType((*Rlt_Login)(nil), "clientmsg.Rlt_Login")
	proto.RegisterType((*Req_Re_ConnectGS)(nil), "clientmsg.Req_Re_ConnectGS")
	proto.RegisterType((*Rlt_Re_ConnectGS)(nil), "clientmsg.Rlt_Re_ConnectGS")
	proto.RegisterType((*Req_SetCharName)(nil), "clientmsg.Req_SetCharName")
	proto.RegisterType((*Rlt_SetCharName)(nil), "clientmsg.Rlt_SetCharName")
	proto.RegisterType((*Req_Match)(nil), "clientmsg.Req_Match")
	proto.RegisterType((*Rlt_Match)(nil), "clientmsg.Rlt_Match")
	proto.RegisterType((*Rlt_Match_MemberInfo)(nil), "clientmsg.Rlt_Match.MemberInfo")
	proto.RegisterType((*Transfer_Team_Operate)(nil), "clientmsg.Transfer_Team_Operate")
	proto.RegisterType((*Rlt_NotifyBattleAddress)(nil), "clientmsg.Rlt_NotifyBattleAddress")
	proto.RegisterType((*Req_Friend_Operate)(nil), "clientmsg.Req_Friend_Operate")
	proto.RegisterType((*Rlt_Friend_Operate)(nil), "clientmsg.Rlt_Friend_Operate")
	proto.RegisterType((*Req_Chat)(nil), "clientmsg.Req_Chat")
	proto.RegisterType((*Rlt_Chat)(nil), "clientmsg.Rlt_Chat")
	proto.RegisterType((*Req_QueryCharInfo)(nil), "clientmsg.Req_QueryCharInfo")
	proto.RegisterType((*Rlt_QueryCharInfo)(nil), "clientmsg.Rlt_QueryCharInfo")
	proto.RegisterType((*Rlt_QueryCharInfo_UserBasicInfo)(nil), "clientmsg.Rlt_QueryCharInfo.UserBasicInfo")
	proto.RegisterType((*Req_MakeTeamOperate)(nil), "clientmsg.Req_MakeTeamOperate")
	proto.RegisterType((*Rlt_MakeTeamOperate)(nil), "clientmsg.Rlt_MakeTeamOperate")
	proto.RegisterType((*Rlt_MakeTeamOperate_TeamMemberInfo)(nil), "clientmsg.Rlt_MakeTeamOperate.TeamMemberInfo")
	proto.RegisterType((*Rlt_Give_Reward)(nil), "clientmsg.Rlt_Give_Reward")
	proto.RegisterType((*Rlt_Give_Reward_Reward)(nil), "clientmsg.Rlt_Give_Reward.Reward")
	proto.RegisterType((*MailInfo)(nil), "clientmsg.MailInfo")
	proto.RegisterType((*Req_Mail_Action)(nil), "clientmsg.Req_Mail_Action")
	proto.RegisterType((*Rlt_Mail_Action)(nil), "clientmsg.Rlt_Mail_Action")
	proto.RegisterType((*Rlt_Asset_Friend)(nil), "clientmsg.Rlt_Asset_Friend")
	proto.RegisterType((*Rlt_Asset_Friend_ApplyInfo)(nil), "clientmsg.Rlt_Asset_Friend.ApplyInfo")
	proto.RegisterType((*Rlt_Asset_Cash)(nil), "clientmsg.Rlt_Asset_Cash")
	proto.RegisterType((*Rlt_Asset_Mail)(nil), "clientmsg.Rlt_Asset_Mail")
	proto.RegisterType((*Rlt_Asset_Mail_MyMailData)(nil), "clientmsg.Rlt_Asset_Mail.MyMailData")
	proto.RegisterType((*Rlt_Asset_Item)(nil), "clientmsg.Rlt_Asset_Item")
	proto.RegisterType((*Rlt_Asset_Hero)(nil), "clientmsg.Rlt_Asset_Hero")
	proto.RegisterType((*Rlt_Asset_Hero_RoleInfo)(nil), "clientmsg.Rlt_Asset_Hero.RoleInfo")
	proto.RegisterType((*Rlt_Asset_Tutorial)(nil), "clientmsg.Rlt_Asset_Tutorial")
	proto.RegisterType((*Rlt_Asset_Statistic)(nil), "clientmsg.Rlt_Asset_Statistic")
	proto.RegisterType((*Rlt_Asset_Achievement)(nil), "clientmsg.Rlt_Asset_Achievement")
	proto.RegisterType((*Rlt_Asset_Achievement_AccumulateInfo)(nil), "clientmsg.Rlt_Asset_Achievement.AccumulateInfo")
	proto.RegisterType((*Rlt_Asset_Achievement_AchievementInfo)(nil), "clientmsg.Rlt_Asset_Achievement.AchievementInfo")
	proto.RegisterType((*Rlt_Asset_Task)(nil), "clientmsg.Rlt_Asset_Task")
	proto.RegisterType((*Req_ConnectBS)(nil), "clientmsg.Req_ConnectBS")
	proto.RegisterType((*Rlt_ConnectBS)(nil), "clientmsg.Rlt_ConnectBS")
	proto.RegisterType((*Rlt_ConnectBS_MemberInfo)(nil), "clientmsg.Rlt_ConnectBS.MemberInfo")
	proto.RegisterType((*Req_Re_ConnectBS)(nil), "clientmsg.Req_Re_ConnectBS")
	proto.RegisterType((*Rlt_StartBattle)(nil), "clientmsg.Rlt_StartBattle")
	proto.RegisterType((*Transfer_Command)(nil), "clientmsg.Transfer_Command")
	proto.RegisterType((*Transfer_Command_CommandData)(nil), "clientmsg.Transfer_Command.CommandData")
	proto.RegisterType((*Req_EndBattle)(nil), "clientmsg.Req_EndBattle")
	proto.RegisterType((*Rlt_EndBattle)(nil), "clientmsg.Rlt_EndBattle")
	proto.RegisterType((*Transfer_Loading_Progress)(nil), "clientmsg.Transfer_Loading_Progress")
	proto.RegisterType((*Transfer_Battle_Message)(nil), "clientmsg.Transfer_Battle_Message")
	proto.RegisterType((*Rlt_Continue_Battle)(nil), "clientmsg.Rlt_Continue_Battle")
	proto.RegisterType((*Transfer_Battle_Heartbeat)(nil), "clientmsg.Transfer_Battle_Heartbeat")
	proto.RegisterEnum("clientmsg.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("clientmsg.Type_LoginRetCode", Type_LoginRetCode_name, Type_LoginRetCode_value)
	proto.RegisterEnum("clientmsg.Type_GameRetCode", Type_GameRetCode_name, Type_GameRetCode_value)
	proto.RegisterEnum("clientmsg.Type_CashType", Type_CashType_name, Type_CashType_value)
	proto.RegisterEnum("clientmsg.Type_Vec3X", Type_Vec3X_name, Type_Vec3X_value)
	proto.RegisterEnum("clientmsg.MatchActionType", MatchActionType_name, MatchActionType_value)
	proto.RegisterEnum("clientmsg.MatchModeType", MatchModeType_name, MatchModeType_value)
	proto.RegisterEnum("clientmsg.MemberStatus", MemberStatus_name, MemberStatus_value)
	proto.RegisterEnum("clientmsg.TeamOperateActionType", TeamOperateActionType_name, TeamOperateActionType_value)
	proto.RegisterEnum("clientmsg.FriendOperateActionType", FriendOperateActionType_name, FriendOperateActionType_value)
	proto.RegisterEnum("clientmsg.ChatChannelType", ChatChannelType_name, ChatChannelType_value)
	proto.RegisterEnum("clientmsg.UserStatus", UserStatus_name, UserStatus_value)
	proto.RegisterEnum("clientmsg.MakeTeamOperateType", MakeTeamOperateType_name, MakeTeamOperateType_value)
	proto.RegisterEnum("clientmsg.MailActionType", MailActionType_name, MailActionType_value)
	proto.RegisterEnum("clientmsg.Type_BattleRetCode", Type_BattleRetCode_name, Type_BattleRetCode_value)
	proto.RegisterEnum("clientmsg.Type_BattleEndTypeID", Type_BattleEndTypeID_name, Type_BattleEndTypeID_value)
	proto.RegisterEnum("clientmsg.BattleMessageType", BattleMessageType_name, BattleMessageType_value)
	proto.RegisterEnum("clientmsg.MailInfo_MailType", MailInfo_MailType_name, MailInfo_MailType_value)
	proto.RegisterEnum("clientmsg.Rlt_Asset_Mail_MyMailStatus", Rlt_Asset_Mail_MyMailStatus_name, Rlt_Asset_Mail_MyMailStatus_value)
	proto.RegisterEnum("clientmsg.Rlt_Asset_Hero_CharTypeStatus", Rlt_Asset_Hero_CharTypeStatus_name, Rlt_Asset_Hero_CharTypeStatus_value)
	proto.RegisterEnum("clientmsg.Rlt_Asset_Achievement_AchievementState", Rlt_Asset_Achievement_AchievementState_name, Rlt_Asset_Achievement_AchievementState_value)
}

var fileDescriptor0 = []byte{
	// 3630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x3a, 0xcd, 0x6f, 0x1b, 0xd7,
	0xf1, 0x5e, 0x52, 0x92, 0xa5, 0x27, 0x4b, 0x5e, 0xaf, 0x23, 0x5b, 0x66, 0x9c, 0xc4, 0xd9, 0x38,
	0x89, 0xc3, 0x5f, 0xcc, 0x24, 0xce, 0x87, 0x93, 0x5f, 0x8b, 0xb6, 0x2b, 0x72, 0x45, 0xad, 0x45,
	0x72, 0xe5, 0xc7, 0x95, 0x6c, 0x1f, 0x5a, 0x66, 0x4d, 0x6e, 0x64, 0xc2, 0x14, 0xe9, 0x92, 0x2b,
	0x7f, 0x04, 0x45, 0x2f, 0x41, 0x83, 0x1e, 0x8a, 0x5e, 0x8b, 0x02, 0x45, 0xd1, 0x53, 0x83, 0xf6,
	0xd4, 0xf6, 0xd0, 0x4b, 0x0b, 0xf4, 0x0f, 0x28, 0xd0, 0x5b, 0x0f, 0x2d, 0x5a, 0xf4, 0xd4, 0xff,
	0xa3, 0x33, 0xf3, 0xde, 0xdb, 0x7d, 0xbb, 0x14, 0xed, 0x44, 0xbd, 0xf4, 0xa4, 0x9d, 0x79, 0xf3,
	0xe6, 0xcd, 0xcc, 0x9b, 0xaf, 0x37, 0x14, 0x5b, 0x39, 0x88, 0x26, 0x93, 0x70, 0x3f, 0xaa, 0x3c,
	0x18, 0x8f, 0xe2, 0x91, 0xb5, 0xd4, 0x1d, 0xf4, 0xa3, 0x61, 0x7c, 0x30, 0xd9, 0xb7, 0xcf, 0xb1,
	0xb9, 0x9d, 0xfe, 0x70, 0xdf, 0x5a, 0x65, 0x05, 0xaf, 0xb6, 0x6e, 0x5c, 0x32, 0xae, 0xac, 0x70,
	0xf8, 0x22, 0xfc, 0xe8, 0x08, 0xfc, 0x65, 0xb6, 0xca, 0xa3, 0xef, 0x76, 0xda, 0xd1, 0xf8, 0x61,
	0x34, 0x0e, 0xfa, 0x07, 0x91, 0x65, 0xb1, 0x39, 0xfc, 0x4b, 0x34, 0x73, 0x9c, 0xbe, 0x89, 0x6a,
	0x10, 0x3f, 0x8b, 0xea, 0x73, 0x83, 0x9d, 0x42, 0x66, 0x3c, 0xda, 0xef, 0x4f, 0xe2, 0x68, 0x6c,
	0x95, 0xd8, 0xe2, 0xee, 0x24, 0x1a, 0xb7, 0x42, 0x49, 0xb8, 0xc4, 0x13, 0x18, 0xd7, 0x76, 0xc2,
	0xc9, 0xe4, 0xd1, 0x68, 0xdc, 0x5b, 0x2f, 0x88, 0x35, 0x05, 0x5b, 0x97, 0xd9, 0x4a, 0x95, 0x34,
	0xda, 0x8b, 0xc6, 0x93, 0xfe, 0x68, 0xb8, 0x5e, 0x04, 0x82, 0x79, 0x9e, 0x45, 0x5a, 0xeb, 0xec,
	0xa4, 0x37, 0x69, 0x8c, 0xf6, 0xfb, 0xc3, 0xf5, 0x39, 0x58, 0x5f, 0xe4, 0x0a, 0xb4, 0xbf, 0x0f,
	0x72, 0x80, 0xb8, 0x89, 0x1c, 0x1f, 0xb0, 0x93, 0x3c, 0x8a, 0xab, 0xa3, 0x9e, 0x10, 0x63, 0xf5,
	0xda, 0xc5, 0x4a, 0x62, 0xb1, 0x4a, 0xf0, 0xe4, 0x41, 0xd4, 0xa1, 0x7d, 0x92, 0x86, 0x2b, 0x62,
	0xeb, 0x1c, 0x5b, 0x40, 0x79, 0xc1, 0x60, 0x05, 0x32, 0x98, 0x84, 0xac, 0x17, 0x19, 0x6b, 0xc3,
	0x05, 0x80, 0x10, 0xdb, 0xd1, 0x13, 0x12, 0xee, 0x14, 0xd7, 0x30, 0x76, 0x59, 0x37, 0x6a, 0x03,
	0x64, 0x40, 0x59, 0xab, 0xf7, 0xc2, 0xe1, 0x30, 0x1a, 0x90, 0x04, 0xf3, 0x5c, 0x81, 0xf6, 0x4f,
	0x0b, 0xba, 0x6d, 0x89, 0xf8, 0x12, 0x5b, 0x16, 0x50, 0x75, 0x74, 0x38, 0x8c, 0xe5, 0x06, 0x1d,
	0x65, 0xd5, 0x50, 0x00, 0x45, 0x0f, 0xc2, 0x15, 0xaf, 0x2c, 0x5f, 0xbb, 0xac, 0xe9, 0x94, 0x65,
	0x58, 0x11, 0x9f, 0xde, 0xf0, 0x93, 0x11, 0xd7, 0xf6, 0x95, 0x7e, 0x6e, 0x28, 0x36, 0xb8, 0x84,
	0x37, 0x22, 0xa1, 0x9a, 0x3c, 0x33, 0x81, 0x85, 0xc6, 0xf8, 0x4d, 0x77, 0x29, 0xee, 0x4b, 0xc3,
	0xa0, 0xa5, 0xda, 0x71, 0x18, 0x1f, 0x4e, 0xe4, 0x55, 0x49, 0x08, 0x55, 0xa9, 0x8e, 0x40, 0xcf,
	0x6e, 0xec, 0xf4, 0x7a, 0x63, 0xba, 0xa7, 0x25, 0xae, 0xa3, 0xf0, 0x54, 0x67, 0x1c, 0x85, 0xc4,
	0x77, 0x5e, 0xf8, 0x81, 0x82, 0xed, 0x0e, 0x5b, 0x42, 0x3b, 0xd2, 0xe5, 0x68, 0x97, 0x61, 0x3c,
	0xe5, 0x32, 0x0a, 0xf9, 0xcb, 0xc8, 0xa8, 0x55, 0xcc, 0xaa, 0x65, 0x83, 0x05, 0x96, 0xd0, 0x56,
	0xe2, 0x84, 0xf7, 0xf3, 0x6e, 0xf2, 0x7c, 0xde, 0x4d, 0xea, 0x20, 0xd5, 0x51, 0x5e, 0x02, 0x97,
	0xa9, 0x79, 0x89, 0x80, 0xac, 0xd7, 0xd8, 0xaa, 0x37, 0x69, 0x45, 0x8f, 0x10, 0x0c, 0xbb, 0xe0,
	0x87, 0x74, 0xfc, 0x22, 0xcf, 0x61, 0x51, 0x40, 0x04, 0xc8, 0x02, 0xc2, 0x40, 0x09, 0x6c, 0xdf,
	0x60, 0xa6, 0x88, 0xa8, 0x8e, 0xb4, 0x59, 0xbd, 0xad, 0x9d, 0x67, 0x64, 0xce, 0x7b, 0x86, 0x21,
	0x6c, 0x0f, 0x78, 0x51, 0x54, 0x68, 0xbc, 0x8e, 0xa7, 0xb2, 0x7d, 0x95, 0x9d, 0x16, 0x0e, 0x1e,
	0x2b, 0x49, 0x33, 0x5a, 0x18, 0x39, 0x2d, 0x7a, 0x40, 0x4e, 0x1e, 0x99, 0x92, 0x1f, 0xd3, 0xd6,
	0xfa, 0x29, 0x85, 0xdc, 0x29, 0x9f, 0x19, 0xc2, 0x5d, 0x9a, 0x61, 0xdc, 0xbd, 0x67, 0x5d, 0x63,
	0x0b, 0x4e, 0x37, 0xc6, 0xe4, 0x21, 0xf8, 0x97, 0x34, 0xfe, 0x44, 0x21, 0x56, 0xf1, 0x28, 0x2e,
	0x29, 0xad, 0x37, 0xd9, 0x5c, 0x13, 0x25, 0x2a, 0xd0, 0x8e, 0xf5, 0xfc, 0x0e, 0x5c, 0x23, 0x7a,
	0xa2, 0xb2, 0x9e, 0x63, 0xf3, 0xcd, 0xf0, 0x41, 0xe2, 0x55, 0x02, 0xb0, 0xff, 0x5d, 0x10, 0x2e,
	0x25, 0xa4, 0x38, 0xa6, 0x9a, 0x1f, 0xb1, 0x93, 0xcd, 0xe8, 0xe0, 0x2e, 0x24, 0x3a, 0x19, 0xdc,
	0x2f, 0xe5, 0x82, 0x9b, 0xb8, 0x57, 0x04, 0x0d, 0xc5, 0xb5, 0xa2, 0xc7, 0xdc, 0x79, 0x2b, 0xec,
	0xc7, 0xbb, 0xc3, 0xb8, 0x3f, 0xa0, 0x0c, 0x8d, 0xd2, 0x15, 0x79, 0x16, 0x59, 0xfa, 0x13, 0x84,
	0x7e, 0xba, 0x7b, 0xa6, 0x4b, 0x3d, 0xc5, 0xdc, 0xb8, 0x27, 0x88, 0xc2, 0x83, 0x44, 0x7f, 0x09,
	0x61, 0xaa, 0xf3, 0x1f, 0x0d, 0x29, 0xdc, 0xe6, 0x88, 0x99, 0x02, 0x15, 0x37, 0x54, 0x9b, 0x42,
	0x7d, 0x9e, 0x27, 0xb0, 0xf5, 0x56, 0x92, 0x40, 0x16, 0xc8, 0x4e, 0xe7, 0x75, 0xe3, 0x93, 0xa0,
	0x62, 0x59, 0x65, 0x16, 0xfb, 0x07, 0x06, 0x5b, 0x0b, 0xc6, 0xe1, 0x70, 0xf2, 0x49, 0x34, 0xee,
	0xe0, 0xd1, 0x1d, 0xff, 0x41, 0x34, 0x0e, 0xe3, 0xc8, 0xfa, 0x30, 0x77, 0xf3, 0x97, 0x74, 0x93,
	0x03, 0xa1, 0xa4, 0x3b, 0xe2, 0xfe, 0x67, 0x45, 0xb2, 0x2e, 0x78, 0x31, 0x2b, 0xb8, 0xfd, 0x13,
	0x83, 0x9d, 0xc7, 0x1b, 0x69, 0x8d, 0xe2, 0xfe, 0x27, 0x4f, 0x36, 0xc2, 0x38, 0x1e, 0x44, 0x98,
	0xd8, 0x20, 0xee, 0x90, 0x1f, 0x1f, 0x8d, 0x0e, 0x92, 0x7c, 0x2a, 0x21, 0x8c, 0xd4, 0x94, 0x50,
	0x65, 0xd3, 0x14, 0x63, 0x5d, 0x64, 0x4b, 0x02, 0x4a, 0xcb, 0x4b, 0x8a, 0xc0, 0xbc, 0x22, 0x80,
	0x24, 0xad, 0xcd, 0x11, 0xf7, 0x1c, 0xd6, 0xfe, 0x8d, 0xc1, 0x2c, 0x8c, 0x87, 0xcd, 0x31, 0x68,
	0xdf, 0x4b, 0xcc, 0xf3, 0xff, 0x39, 0xf3, 0xd8, 0x9a, 0x79, 0x04, 0xe9, 0x6c, 0x03, 0x51, 0x8a,
	0x09, 0xc7, 0xdd, 0x7b, 0xd9, 0x32, 0xa0, 0x30, 0xe8, 0x7c, 0x72, 0xb3, 0xb4, 0x63, 0x91, 0xec,
	0x98, 0x45, 0xa2, 0x87, 0x34, 0x45, 0xff, 0x22, 0xf3, 0x9d, 0x02, 0xed, 0xdf, 0xa2, 0xc8, 0x60,
	0xcc, 0x9c, 0xc8, 0xc7, 0x8c, 0xa2, 0x54, 0xd3, 0xc2, 0x57, 0xd6, 0xf4, 0x0a, 0x3b, 0x2d, 0xf4,
	0x8a, 0x7a, 0x42, 0x6a, 0xac, 0x6c, 0x45, 0xd0, 0x25, 0x8f, 0xb6, 0x7f, 0x61, 0xb0, 0x45, 0x34,
	0x33, 0xc0, 0xb1, 0xf5, 0x5e, 0xb6, 0xce, 0x67, 0xd3, 0x0e, 0x52, 0xc8, 0x55, 0x3a, 0x4b, 0x91,
	0xa2, 0x7f, 0x05, 0xe1, 0x78, 0x3f, 0x8a, 0x13, 0xcf, 0x4b, 0x60, 0xac, 0xa0, 0xd2, 0x3a, 0x89,
	0xfb, 0xad, 0x70, 0x1d, 0xa5, 0x51, 0xd4, 0xc2, 0x38, 0x54, 0x35, 0x56, 0x43, 0xd9, 0x7f, 0x44,
	0x11, 0xc1, 0xac, 0xff, 0xbb, 0x22, 0x8a, 0x2a, 0x3d, 0xec, 0x91, 0x3b, 0xcf, 0x0b, 0xfe, 0x0a,
	0x86, 0x6a, 0x73, 0x06, 0x0d, 0x7c, 0xf3, 0x30, 0x1a, 0x3f, 0x21, 0xab, 0x63, 0xca, 0x12, 0x1d,
	0x15, 0x5d, 0x8c, 0x41, 0x17, 0xa3, 0x40, 0xfb, 0xf3, 0x02, 0xd0, 0x83, 0xb6, 0x59, 0xfa, 0x63,
	0xfa, 0xd0, 0xa6, 0x68, 0x61, 0x91, 0x85, 0x4c, 0xc5, 0xe5, 0x5c, 0x2a, 0xce, 0x1c, 0x53, 0x41,
	0xe2, 0x8d, 0x70, 0xd2, 0xef, 0x52, 0x56, 0x4e, 0xf6, 0x96, 0xc6, 0x6c, 0x25, 0xb3, 0x74, 0xac,
	0x94, 0x7b, 0x35, 0xd3, 0x65, 0xad, 0x5e, 0x5b, 0xd3, 0x44, 0x41, 0xee, 0xb9, 0x14, 0xf9, 0x2b,
	0x83, 0x9d, 0x15, 0x05, 0xf1, 0x7e, 0xa4, 0x25, 0x3e, 0x68, 0x87, 0xb3, 0x19, 0xe0, 0xc5, 0x4c,
	0xa1, 0xcb, 0xd0, 0x66, 0x62, 0xe2, 0x69, 0x3e, 0x00, 0xd7, 0x11, 0x84, 0x77, 0x07, 0x51, 0x52,
	0x0e, 0x14, 0x88, 0x39, 0x81, 0xaa, 0x55, 0x2e, 0x5b, 0x65, 0x91, 0xf6, 0x17, 0x45, 0x90, 0x95,
	0x0a, 0x5b, 0x56, 0xd6, 0x63, 0x5e, 0xdb, 0x07, 0xb9, 0xd0, 0x3f, 0x8e, 0x8a, 0xc5, 0xd9, 0x2a,
	0xce, 0x3d, 0x43, 0xc5, 0xf9, 0x23, 0x54, 0xc4, 0xac, 0xee, 0x0d, 0x1f, 0xf6, 0x63, 0xa2, 0x58,
	0x20, 0x8a, 0x14, 0x61, 0xb9, 0x6c, 0x41, 0xd4, 0xb9, 0xf5, 0x93, 0xe4, 0x66, 0x57, 0xa7, 0x2a,
	0x7e, 0x46, 0x6a, 0xaa, 0x64, 0x5a, 0xfd, 0x97, 0x9b, 0x4b, 0x1f, 0xb3, 0xd5, 0xec, 0xca, 0xb1,
	0x1c, 0x0d, 0x1f, 0x67, 0xa3, 0x49, 0x3f, 0x56, 0x6f, 0x2f, 0x30, 0x83, 0x82, 0xed, 0x1f, 0x1a,
	0xa2, 0x9b, 0xab, 0xf7, 0x1f, 0x46, 0xd0, 0x4c, 0x3e, 0x0a, 0xe1, 0xc1, 0xe6, 0x30, 0x36, 0xa6,
	0xaf, 0x01, 0xbe, 0x47, 0x0c, 0x52, 0xe0, 0xe5, 0x9c, 0x02, 0x1a, 0x7d, 0x45, 0xfc, 0xe1, 0xda,
	0xa6, 0x12, 0xf4, 0x6b, 0x92, 0xd9, 0x29, 0x66, 0x3c, 0x96, 0x05, 0xd3, 0x78, 0x8c, 0x90, 0x68,
	0x66, 0x01, 0x7a, 0x82, 0xd0, 0xa7, 0xd2, 0xc1, 0x8c, 0x4f, 0xed, 0xbf, 0x17, 0xd8, 0x62, 0x33,
	0xec, 0x0f, 0x94, 0x9e, 0xf8, 0xdd, 0xef, 0xc9, 0xf6, 0x53, 0x42, 0x94, 0x7b, 0xe0, 0x6b, 0x84,
	0x4d, 0x48, 0xbf, 0x27, 0x1d, 0x57, 0x47, 0x41, 0xc3, 0x40, 0x5c, 0x62, 0x95, 0xbc, 0xb2, 0xef,
	0x43, 0x75, 0x00, 0x7d, 0x90, 0xb3, 0x24, 0xd4, 0xd8, 0x02, 0x06, 0x7d, 0xa8, 0xb9, 0x32, 0xa3,
	0x09, 0x80, 0x52, 0xd3, 0x68, 0x18, 0xc3, 0x7e, 0xf9, 0xa2, 0x51, 0x20, 0xe6, 0x5e, 0xa1, 0xa4,
	0x68, 0x73, 0x96, 0x33, 0xb9, 0x37, 0x67, 0x24, 0xae, 0x48, 0xb1, 0xea, 0x56, 0xe1, 0x49, 0x04,
	0xae, 0x8a, 0xfd, 0xdc, 0x49, 0xea, 0xe7, 0x34, 0x0c, 0xae, 0xbb, 0x8f, 0x1f, 0xf4, 0xc7, 0x62,
	0x7d, 0x51, 0xac, 0xa7, 0x18, 0xfb, 0x3d, 0xa1, 0x1f, 0x65, 0xe2, 0x15, 0xb6, 0xd4, 0x0c, 0x3a,
	0xed, 0x3b, 0xed, 0xc0, 0x6d, 0x9a, 0x27, 0xac, 0x65, 0x28, 0xc5, 0x41, 0x67, 0xb7, 0xed, 0x72,
	0xd3, 0x00, 0xe3, 0x2e, 0x02, 0x50, 0xdf, 0xf5, 0x1a, 0x35, 0xb3, 0x60, 0x7f, 0x47, 0xf4, 0xf8,
	0xb8, 0xb3, 0x23, 0xa3, 0xe3, 0x9d, 0x5c, 0xe2, 0xb8, 0x90, 0x33, 0xd3, 0x11, 0x75, 0x14, 0x6b,
	0x3d, 0x1a, 0xb0, 0x26, 0x3a, 0x59, 0xac, 0xf5, 0x02, 0xb4, 0x7f, 0x29, 0xfd, 0x48, 0x3f, 0xe0,
	0x98, 0xd1, 0xfe, 0x4e, 0x2e, 0xda, 0xbf, 0x84, 0x5c, 0x6f, 0x60, 0xf3, 0xde, 0x1f, 0x88, 0xaa,
	0xbe, 0x7c, 0xed, 0xec, 0x11, 0x17, 0xce, 0x05, 0x85, 0xfd, 0x2f, 0x43, 0x3c, 0x9c, 0x9c, 0xc9,
	0x24, 0x52, 0xad, 0xc9, 0xcc, 0xa8, 0x02, 0x7d, 0x05, 0x85, 0xd0, 0x17, 0xca, 0x92, 0x04, 0xad,
	0x2a, 0x5b, 0x72, 0x1e, 0x3c, 0x18, 0x3c, 0xa1, 0x27, 0xbb, 0x38, 0xf5, 0xd5, 0xdc, 0xed, 0xeb,
	0x27, 0x54, 0x88, 0x98, 0xe4, 0x48, 0xf7, 0x95, 0x02, 0xc9, 0x44, 0x79, 0xfc, 0xe6, 0x38, 0x69,
	0x2f, 0x41, 0x06, 0x01, 0x41, 0x2f, 0x5d, 0x6c, 0x4e, 0xf6, 0xc9, 0x16, 0xcb, 0xd7, 0x5e, 0xd0,
	0xcf, 0x98, 0xea, 0x06, 0x39, 0x52, 0xda, 0xff, 0x30, 0xc4, 0x0c, 0x42, 0x9c, 0x5f, 0x0d, 0x27,
	0xf7, 0x66, 0xea, 0x07, 0x1e, 0xdf, 0x88, 0x1e, 0x42, 0xef, 0x20, 0xe2, 0x48, 0x00, 0x96, 0xc9,
	0x8a, 0xe0, 0x6f, 0x32, 0x55, 0xe0, 0x27, 0x78, 0xfa, 0x5a, 0x23, 0x9c, 0x40, 0x2f, 0x11, 0x75,
	0xef, 0xd7, 0x07, 0xa3, 0xbb, 0xe1, 0x80, 0x5c, 0x70, 0x42, 0x91, 0x52, 0xe4, 0x47, 0x2f, 0x62,
	0xde, 0xa9, 0x8f, 0x06, 0xbd, 0xea, 0xa8, 0x3f, 0x54, 0x5d, 0x80, 0x82, 0xa9, 0xf7, 0xec, 0x0f,
	0x68, 0x04, 0x02, 0xab, 0x0b, 0xb4, 0xaa, 0x61, 0xd0, 0xf2, 0xb5, 0x7e, 0x78, 0x30, 0x1a, 0xf6,
	0x28, 0x44, 0xc0, 0xf2, 0x12, 0xb4, 0xff, 0x59, 0xd0, 0xd5, 0xc3, 0xa3, 0x66, 0xaa, 0xf7, 0x2d,
	0x11, 0x2a, 0xd4, 0xa5, 0x1c, 0x3d, 0x56, 0x49, 0x99, 0x54, 0x9a, 0x4f, 0x14, 0x2d, 0x4f, 0x76,
	0x89, 0x5a, 0x80, 0x1e, 0xee, 0x3e, 0xee, 0x0e, 0x0e, 0x7b, 0x11, 0x5d, 0xf5, 0x12, 0xcf, 0x22,
	0x4b, 0x3f, 0xc2, 0xf7, 0x57, 0xb2, 0x5d, 0xe5, 0x2e, 0x29, 0x8e, 0xcc, 0x5d, 0x20, 0xce, 0x26,
	0x50, 0xc1, 0x97, 0x2c, 0xfa, 0xc2, 0xb9, 0x5f, 0x7b, 0x96, 0x40, 0xb2, 0x0b, 0xd0, 0x76, 0xe6,
	0x32, 0x48, 0x31, 0x9f, 0x41, 0xec, 0xaf, 0xb3, 0x53, 0xfa, 0x5e, 0xca, 0x04, 0xcd, 0x76, 0xa7,
	0xe5, 0xb7, 0x5c, 0x48, 0x12, 0x12, 0xe2, 0xae, 0x53, 0x83, 0x2c, 0x61, 0x02, 0x2d, 0x41, 0x55,
	0xd7, 0xdb, 0x73, 0x31, 0x53, 0x5c, 0xd1, 0xcd, 0xeb, 0xc5, 0xd1, 0xc1, 0x2c, 0xf3, 0xda, 0x7f,
	0xce, 0xdc, 0xc4, 0x56, 0x34, 0x9e, 0x5d, 0x9e, 0x3e, 0x64, 0xf3, 0x7c, 0x34, 0x88, 0xd4, 0x03,
	0xd8, 0x3e, 0x52, 0x6b, 0xe4, 0x50, 0x41, 0x32, 0x11, 0xaf, 0xb4, 0xa1, 0xf4, 0x7b, 0xec, 0x76,
	0x25, 0x8e, 0x34, 0x97, 0x4f, 0xb5, 0xe4, 0x08, 0x0d, 0x63, 0x6d, 0x31, 0x86, 0xb4, 0x19, 0x0b,
	0x5f, 0x99, 0x7d, 0x96, 0xda, 0xa9, 0x6c, 0x9c, 0xee, 0xc5, 0xf2, 0x8e, 0x0f, 0xdd, 0x9e, 0x66,
	0xe2, 0x14, 0x61, 0xd9, 0xec, 0x54, 0x2d, 0x0a, 0x7b, 0x8d, 0xfe, 0x50, 0xdc, 0x81, 0x08, 0x83,
	0x0c, 0xce, 0xae, 0xb0, 0xd5, 0x2c, 0x7f, 0xb4, 0x3c, 0x6f, 0x77, 0xfc, 0x5b, 0x2d, 0xb0, 0xf3,
	0x09, 0x6b, 0x15, 0x64, 0x6d, 0x77, 0x1a, 0x5e, 0xd3, 0x0b, 0x00, 0x36, 0xec, 0x37, 0xc5, 0x63,
	0x49, 0x88, 0x17, 0x1c, 0xc6, 0xa3, 0x71, 0x3f, 0x9c, 0xe9, 0xda, 0xd0, 0x45, 0x9f, 0x4d, 0xa9,
	0x91, 0x3f, 0xe4, 0x93, 0x7e, 0x77, 0x26, 0xf9, 0xdf, 0x8a, 0x6c, 0x2d, 0xa5, 0x77, 0xba, 0xf7,
	0xfa, 0x10, 0xe9, 0x07, 0x58, 0xc4, 0x66, 0xdd, 0x18, 0x67, 0xcb, 0x92, 0x4c, 0x0b, 0x9f, 0xb7,
	0x8f, 0xb4, 0xa5, 0xc6, 0xae, 0xa2, 0x7d, 0xd3, 0x2d, 0xea, 0x4c, 0xac, 0x6d, 0xb6, 0xe8, 0x74,
	0xbb, 0x87, 0xc4, 0x50, 0xe4, 0xcc, 0xb7, 0xbe, 0x04, 0xc3, 0xee, 0xe1, 0xc1, 0xe1, 0x00, 0x7c,
	0x5b, 0xf4, 0xe0, 0x8a, 0x41, 0xe9, 0x03, 0xb6, 0x9a, 0x5d, 0xd3, 0xa6, 0xe1, 0xf3, 0x38, 0x0d,
	0xc7, 0xec, 0xb6, 0x17, 0x0e, 0x0e, 0x23, 0xd9, 0x70, 0x08, 0xa0, 0xf4, 0x33, 0xa8, 0x54, 0x39,
	0x29, 0xa7, 0x76, 0xd6, 0xd9, 0x3c, 0xda, 0x54, 0xcd, 0x8e, 0xde, 0xf9, 0x2a, 0x6a, 0xd3, 0x46,
	0x2e, 0xf6, 0x53, 0xeb, 0x35, 0x1e, 0xed, 0xe3, 0xfc, 0x40, 0xcd, 0x1a, 0x14, 0x4c, 0xed, 0xc6,
	0x28, 0x0e, 0x07, 0xb2, 0xff, 0x14, 0x80, 0xfd, 0x36, 0x33, 0xf3, 0xcc, 0xb0, 0xae, 0x3b, 0x49,
	0xfc, 0x9e, 0x86, 0x8b, 0x69, 0x77, 0x9c, 0xea, 0x96, 0xe7, 0xee, 0x91, 0xe3, 0x64, 0x02, 0x36,
	0x08, 0x27, 0xf7, 0x67, 0x7a, 0xc1, 0xb7, 0xd9, 0x0a, 0xbd, 0x6d, 0xc5, 0xc0, 0x70, 0xa3, 0x3d,
	0x73, 0xa4, 0x91, 0x19, 0x59, 0x14, 0xf2, 0x23, 0x8b, 0x94, 0x7d, 0x31, 0xc3, 0xfe, 0x2f, 0x05,
	0xe0, 0x8f, 0x0f, 0xd3, 0x84, 0xff, 0xf5, 0x7c, 0x07, 0xf0, 0x42, 0xbe, 0x03, 0x10, 0x5c, 0xa7,
	0x7a, 0x80, 0x64, 0x1a, 0x57, 0xd0, 0xa6, 0x71, 0xd6, 0xd7, 0x92, 0xae, 0x5a, 0x78, 0xcf, 0x2b,
	0xb9, 0x7b, 0x49, 0x0e, 0xae, 0x4c, 0xf7, 0xd2, 0xd8, 0x39, 0x7a, 0x13, 0x1e, 0x75, 0x05, 0x8d,
	0xfc, 0x91, 0x41, 0x47, 0x95, 0x7e, 0xfc, 0xdf, 0x8f, 0xd1, 0x9e, 0x32, 0x5b, 0xd2, 0x46, 0x6c,
	0x73, 0xb3, 0x46, 0x6c, 0xf3, 0x99, 0x11, 0x9b, 0x7d, 0x37, 0x3f, 0x2f, 0x06, 0x93, 0x66, 0xae,
	0xc6, 0x98, 0x7d, 0x35, 0x85, 0xe9, 0x46, 0x06, 0x04, 0x4c, 0xee, 0x4c, 0x81, 0x34, 0xfc, 0x1d,
	0x50, 0x0a, 0x19, 0xc7, 0x82, 0x0f, 0x2a, 0xc1, 0xc3, 0x61, 0xaf, 0x1d, 0x45, 0x3d, 0xf5, 0xd3,
	0x81, 0x82, 0xed, 0xdf, 0x41, 0xfb, 0x94, 0x0c, 0xea, 0xaa, 0xa3, 0x83, 0x03, 0x58, 0xd0, 0xb9,
	0x1b, 0x19, 0xee, 0xd0, 0x26, 0x2d, 0xca, 0xb9, 0x80, 0x4a, 0xfd, 0xaf, 0xeb, 0x1e, 0x90, 0x63,
	0x54, 0x91, 0x7f, 0x65, 0x11, 0x96, 0x1b, 0x4b, 0xdf, 0xc4, 0x9f, 0x1d, 0x92, 0x85, 0xa7, 0x35,
	0x6b, 0xc0, 0xb4, 0x27, 0xb2, 0x15, 0xda, 0x45, 0x81, 0xf6, 0xc7, 0xc2, 0xef, 0xdd, 0x61, 0x4f,
	0x6a, 0x78, 0x1d, 0xae, 0x22, 0xad, 0x21, 0xab, 0x99, 0x81, 0xac, 0xe6, 0x96, 0xb0, 0x41, 0x90,
	0x71, 0x49, 0x3e, 0xcb, 0xbe, 0x74, 0x02, 0x58, 0x51, 0x3f, 0xe1, 0x98, 0x9e, 0x3f, 0xeb, 0x04,
	0x9f, 0x5d, 0x48, 0xcc, 0xd5, 0x18, 0x85, 0xbd, 0xfe, 0x70, 0xbf, 0x93, 0xa4, 0x92, 0xa7, 0xb8,
	0x6a, 0x92, 0x7e, 0x0a, 0xd9, 0xf4, 0x63, 0xff, 0xd5, 0x60, 0xe7, 0x13, 0x8e, 0x42, 0x98, 0x8e,
	0x34, 0xb9, 0xf5, 0x8d, 0xec, 0x0c, 0x68, 0xfa, 0x67, 0x36, 0x41, 0xaf, 0xd1, 0x64, 0x27, 0x44,
	0xe0, 0xa4, 0xf2, 0xc6, 0x12, 0x3d, 0x52, 0x04, 0x3d, 0xcb, 0x47, 0xda, 0xb4, 0x19, 0x9f, 0xe5,
	0x12, 0xc6, 0x0a, 0x8f, 0x7d, 0xaf, 0xd4, 0x46, 0x8c, 0x9c, 0x35, 0x4c, 0x7e, 0xf6, 0x34, 0x3f,
	0x3d, 0x1e, 0xfb, 0xcc, 0x10, 0xa5, 0x11, 0x5f, 0x69, 0xfd, 0xe1, 0xa1, 0x32, 0xf4, 0x4c, 0x1b,
	0xa5, 0x39, 0xb0, 0x30, 0x3b, 0x07, 0x4e, 0x8d, 0x6d, 0xb3, 0x43, 0xdf, 0xb9, 0xfc, 0xd0, 0xd7,
	0xbe, 0xae, 0x5d, 0x97, 0x34, 0xee, 0x56, 0x04, 0x21, 0x76, 0x17, 0xba, 0x34, 0x32, 0x40, 0xbf,
	0x7b, 0x5f, 0xfb, 0xc9, 0x35, 0x81, 0xcb, 0x5f, 0x2c, 0x65, 0x6c, 0x2f, 0xdf, 0x74, 0x3b, 0x5e,
	0xab, 0x9e, 0x3c, 0xf0, 0x76, 0x7c, 0x00, 0x0c, 0x6b, 0x8d, 0x9d, 0x01, 0x80, 0xbb, 0x37, 0x3b,
	0xf0, 0xe0, 0xdb, 0x73, 0x79, 0xe0, 0x35, 0x5d, 0xb3, 0xa0, 0xd0, 0x8d, 0x40, 0x47, 0x17, 0xad,
	0xb3, 0xec, 0xb4, 0xa4, 0xe6, 0x6e, 0xdd, 0x83, 0x07, 0x23, 0x37, 0xe7, 0x14, 0xb2, 0x11, 0xa4,
	0xc8, 0xf9, 0x29, 0xbe, 0x0d, 0x58, 0x30, 0x17, 0xa6, 0xf8, 0x12, 0xfa, 0x24, 0x35, 0x90, 0x82,
	0xba, 0xe1, 0xd7, 0xbd, 0x96, 0xb9, 0xa8, 0x30, 0x40, 0x28, 0x30, 0x4b, 0x60, 0x62, 0x2b, 0xe1,
	0x18, 0x54, 0xb7, 0x1c, 0xde, 0x72, 0x40, 0x26, 0xa6, 0xf0, 0xc4, 0x32, 0xc5, 0x2f, 0x6b, 0x3c,
	0x9b, 0x0e, 0xe0, 0xcd, 0x53, 0x1a, 0x4f, 0x81, 0x59, 0x81, 0x0b, 0x28, 0x49, 0x4c, 0xcb, 0x0f,
	0xbc, 0xcd, 0x3b, 0x1b, 0x4e, 0x10, 0x34, 0xa0, 0xa7, 0xad, 0x71, 0xb7, 0xdd, 0x36, 0x57, 0xa1,
	0x82, 0x98, 0x92, 0x47, 0xd5, 0x6f, 0xb5, 0xdc, 0x6a, 0xb0, 0xd1, 0x36, 0x4f, 0x2b, 0x2c, 0xec,
	0x4a, 0xb1, 0xa6, 0x2e, 0x47, 0xe0, 0xf0, 0x40, 0xb0, 0x32, 0xcf, 0x68, 0x3c, 0xdc, 0x56, 0x4d,
	0x62, 0x2d, 0x8d, 0x47, 0x8a, 0x3d, 0x6b, 0x9d, 0x67, 0x67, 0x01, 0x1b, 0x70, 0xa7, 0xd5, 0xde,
	0x74, 0x39, 0xb0, 0x6f, 0x36, 0x9d, 0x56, 0xcd, 0x7c, 0x0e, 0x3c, 0xf6, 0xa2, 0xbe, 0xd0, 0xf0,
	0x9d, 0x1a, 0x5c, 0x66, 0x67, 0x87, 0xfb, 0x75, 0x12, 0x75, 0xcd, 0x7a, 0x9e, 0x9d, 0xd7, 0x29,
	0x02, 0xd7, 0x69, 0xfa, 0x3b, 0x2e, 0x77, 0x02, 0xd7, 0x3c, 0x67, 0x5d, 0x60, 0x6b, 0x52, 0x86,
	0x4d, 0xee, 0xc1, 0x81, 0x1d, 0xb5, 0x74, 0x5e, 0x2d, 0x81, 0x20, 0xb9, 0xa5, 0x75, 0x6c, 0x12,
	0x94, 0xf6, 0x5b, 0x4e, 0x60, 0x5e, 0x50, 0x08, 0x54, 0x1c, 0x11, 0x25, 0x8d, 0xef, 0xcd, 0x5d,
	0x97, 0xdf, 0x41, 0x34, 0xf7, 0x5a, 0x9b, 0xbe, 0xf9, 0xbc, 0xc6, 0x37, 0xb7, 0x74, 0x51, 0x8a,
	0x2a, 0x6e, 0x66, 0xdb, 0x45, 0x49, 0x93, 0x43, 0x5f, 0x50, 0x8b, 0x74, 0x49, 0xb9, 0xc5, 0x17,
	0xe5, 0x7d, 0x25, 0x4a, 0x92, 0xdd, 0x80, 0x10, 0x2c, 0xe0, 0xd4, 0x5d, 0xf3, 0x25, 0x69, 0x3f,
	0xdc, 0xec, 0xb4, 0xc1, 0x1b, 0xa4, 0x4a, 0xe6, 0x25, 0xcd, 0xef, 0xc4, 0x42, 0xd5, 0x69, 0x6f,
	0x99, 0x2f, 0x4f, 0xa1, 0x9b, 0x8e, 0xd7, 0x30, 0xed, 0x29, 0xb4, 0x87, 0x93, 0x91, 0x57, 0xa6,
	0xd0, 0x5b, 0x2e, 0xf7, 0xcd, 0xcb, 0x9a, 0xa6, 0x02, 0x1d, 0xec, 0x06, 0x3e, 0xf7, 0x9c, 0x86,
	0xf9, 0x2a, 0xc4, 0xe8, 0xb9, 0xcc, 0x12, 0x78, 0x46, 0x00, 0x1e, 0xef, 0x55, 0xcd, 0xd7, 0x20,
	0x35, 0xac, 0x67, 0xd6, 0x64, 0x33, 0xd6, 0x74, 0x5b, 0x81, 0xf9, 0xfa, 0xd4, 0x59, 0x81, 0xd3,
	0xde, 0x36, 0xaf, 0x68, 0x41, 0x80, 0xa2, 0xc2, 0x9e, 0xc0, 0xf3, 0x5b, 0xe6, 0x1b, 0x9a, 0xf3,
	0xe9, 0xf8, 0xb2, 0x86, 0xaf, 0xc3, 0xcb, 0x0c, 0x36, 0xde, 0x72, 0x78, 0xcd, 0xfc, 0x3f, 0x65,
	0x28, 0x0a, 0x64, 0xe5, 0xc5, 0xf5, 0xb6, 0xf9, 0xa6, 0x66, 0xc1, 0xcc, 0xc2, 0xd5, 0x23, 0x77,
	0x80, 0xdf, 0x57, 0x34, 0x1d, 0x01, 0x1b, 0x78, 0xad, 0x5d, 0xb7, 0x23, 0xfd, 0xf9, 0xad, 0xbc,
	0xdb, 0x0a, 0x3c, 0xd8, 0x0d, 0xe3, 0xc3, 0x05, 0x0f, 0x7a, 0xbb, 0xfc, 0x98, 0x9d, 0x99, 0xfa,
	0x6f, 0x0b, 0x8b, 0xb1, 0x85, 0x06, 0xaf, 0x76, 0xfc, 0x6d, 0xc8, 0x56, 0x60, 0x08, 0xfc, 0x76,
	0xaa, 0x55, 0x7f, 0xb7, 0x05, 0xd1, 0x72, 0x1b, 0x33, 0x86, 0x81, 0x46, 0xd7, 0xd1, 0x10, 0xbe,
	0x72, 0xa9, 0x80, 0x3a, 0xe3, 0xd2, 0x0e, 0x18, 0xee, 0x96, 0xcf, 0x6b, 0x1d, 0x97, 0x73, 0x9f,
	0x43, 0xf2, 0x5a, 0x61, 0x4b, 0xc4, 0x35, 0x80, 0x7b, 0x33, 0x7b, 0xe5, 0x5f, 0x17, 0xa0, 0x09,
	0xc9, 0xcd, 0x8f, 0xf0, 0xe4, 0xba, 0x3a, 0x19, 0xf8, 0xe0, 0x37, 0xa6, 0x13, 0xe2, 0xbf, 0xe7,
	0x34, 0x3c, 0x7c, 0xed, 0x4a, 0xbc, 0x70, 0xeb, 0xc0, 0xf7, 0xc1, 0xe4, 0xad, 0x3b, 0x70, 0x2e,
	0xe4, 0x41, 0xc4, 0x53, 0x6e, 0x11, 0x39, 0x00, 0xb2, 0x16, 0xe4, 0x9c, 0x14, 0x09, 0x6c, 0x19,
	0x2a, 0x94, 0x62, 0xc0, 0x64, 0x9b, 0x1e, 0x6f, 0x42, 0xba, 0x02, 0xbf, 0x4f, 0xd1, 0x4e, 0xa3,
	0xa1, 0x96, 0xa0, 0x3b, 0x3f, 0x95, 0x65, 0x2d, 0xf4, 0x59, 0x51, 0x72, 0x24, 0x8c, 0xc8, 0xf6,
	0x90, 0xb4, 0xe0, 0xa6, 0xb2, 0x9c, 0x36, 0xbd, 0xdb, 0xc0, 0xe5, 0x74, 0x6e, 0x83, 0xd3, 0xaa,
	0xba, 0x0d, 0xc0, 0x43, 0x32, 0x62, 0xab, 0x29, 0x7e, 0x73, 0xb7, 0xd1, 0x80, 0xac, 0x05, 0xc6,
	0xaa, 0x6b, 0xc6, 0xba, 0xc3, 0x56, 0xc8, 0x56, 0x38, 0x08, 0xa2, 0x8a, 0x02, 0xcf, 0xd0, 0xa0,
	0x1a, 0x68, 0xe3, 0x00, 0x84, 0xea, 0x7e, 0x03, 0x0d, 0x04, 0x8f, 0x52, 0x84, 0xda, 0x5e, 0x03,
	0x32, 0x3c, 0x18, 0x06, 0xd2, 0x06, 0xc2, 0x35, 0x0f, 0x52, 0x12, 0x44, 0x63, 0x11, 0x2b, 0x10,
	0x22, 0xdc, 0xdb, 0x3b, 0xe6, 0x5c, 0xb9, 0x06, 0xd4, 0xc8, 0x7a, 0x2f, 0xea, 0xbe, 0x7b, 0x9b,
	0x38, 0xed, 0xdd, 0xd6, 0xf9, 0x02, 0x44, 0xd1, 0x6a, 0x28, 0x88, 0xc2, 0xae, 0xa0, 0x20, 0x8a,
	0xcd, 0x62, 0x79, 0x07, 0x8a, 0x50, 0xf6, 0x27, 0x7c, 0x9a, 0x51, 0x38, 0x41, 0xe7, 0x86, 0x0f,
	0xe5, 0x83, 0x5e, 0xca, 0x08, 0x09, 0xb5, 0x81, 0x19, 0xe6, 0x32, 0x27, 0x48, 0x2e, 0xa0, 0xa0,
	0x08, 0xb8, 0x7b, 0x03, 0x3c, 0x1b, 0x38, 0x7e, 0x24, 0x27, 0xf8, 0xea, 0x27, 0x7e, 0x22, 0x68,
	0xa2, 0xca, 0xbc, 0x09, 0xc1, 0x2d, 0x67, 0x20, 0xb0, 0xc1, 0x69, 0x6d, 0x03, 0x3f, 0xf0, 0x1c,
	0x84, 0x1c, 0xcf, 0x2c, 0x94, 0x1b, 0x50, 0x68, 0xb4, 0x1f, 0xa8, 0xa9, 0xe2, 0x26, 0x4f, 0x2f,
	0x64, 0xd3, 0x4e, 0xce, 0x35, 0x24, 0x0c, 0x31, 0x1e, 0xe0, 0x6d, 0x90, 0xb5, 0x68, 0x96, 0x82,
	0x62, 0x00, 0xa2, 0x58, 0xbe, 0xce, 0xd6, 0x8e, 0xfc, 0x8d, 0x9a, 0xec, 0xec, 0x3b, 0x90, 0x59,
	0x7d, 0xbf, 0x2d, 0x39, 0x23, 0x2c, 0x58, 0x99, 0x46, 0xf9, 0x21, 0x3b, 0x3f, 0xe3, 0x37, 0x4d,
	0x3c, 0x64, 0xd3, 0x77, 0xb0, 0x64, 0x3a, 0x1c, 0x2a, 0xe1, 0x09, 0xf4, 0x30, 0x42, 0x40, 0xed,
	0x53, 0x59, 0xd3, 0x48, 0x90, 0x35, 0xb7, 0xa1, 0x90, 0x85, 0x64, 0x2b, 0x84, 0x9e, 0xbb, 0x03,
	0x86, 0x4a, 0x10, 0xd2, 0x72, 0x73, 0xe5, 0x6d, 0x76, 0x3a, 0xf7, 0xa3, 0x21, 0x8a, 0x56, 0xad,
	0x6a, 0x43, 0x66, 0x70, 0x2f, 0x84, 0x21, 0x3e, 0xc9, 0x63, 0xc0, 0x94, 0x08, 0x62, 0xb6, 0x87,
	0x13, 0xc0, 0x5c, 0x08, 0xed, 0x5c, 0xdb, 0x01, 0xed, 0x7b, 0x8c, 0xa5, 0xbf, 0x63, 0x61, 0xf0,
	0xec, 0xb6, 0x3b, 0x3b, 0x0d, 0xe7, 0x0e, 0xa4, 0x13, 0x7f, 0x73, 0xb3, 0xe1, 0x91, 0x4d, 0xa1,
	0x9a, 0x6a, 0xe8, 0x16, 0x61, 0x49, 0xfc, 0x14, 0x2b, 0x4a, 0x7e, 0x21, 0x4b, 0x2a, 0x13, 0x55,
	0xb1, 0xfc, 0x07, 0xe8, 0xf7, 0x8e, 0xf8, 0x11, 0x48, 0x54, 0x3c, 0x88, 0xfd, 0x2a, 0x77, 0xb1,
	0x02, 0x9d, 0x48, 0x10, 0x5e, 0x6b, 0x0f, 0x3c, 0x0f, 0x0e, 0xa1, 0xe9, 0x39, 0x20, 0xb6, 0xbd,
	0xea, 0xb6, 0xbc, 0x3d, 0x04, 0x75, 0xeb, 0x10, 0x42, 0x59, 0x47, 0x54, 0x7e, 0x5f, 0x76, 0x09,
	0x52, 0x2c, 0xd9, 0x2f, 0x25, 0x58, 0x29, 0xd7, 0x42, 0x42, 0x0c, 0xd5, 0xb3, 0x55, 0x77, 0x85,
	0x81, 0x4e, 0x92, 0xcb, 0x20, 0x16, 0x5a, 0x95, 0x3d, 0xd7, 0x5c, 0x2c, 0xdf, 0x64, 0xab, 0xd9,
	0x99, 0xb6, 0x75, 0x06, 0x9c, 0x17, 0xae, 0x04, 0xdb, 0x2b, 0x51, 0xd4, 0x4e, 0xa8, 0x70, 0x90,
	0x23, 0x3b, 0xe9, 0xfe, 0x72, 0x64, 0x07, 0x82, 0xa3, 0x1e, 0x80, 0x80, 0x4a, 0xdb, 0x46, 0x83,
	0x7c, 0x8f, 0x59, 0xd3, 0x0f, 0x0c, 0x74, 0xf2, 0x0d, 0x95, 0x1e, 0x21, 0xcd, 0xe0, 0xb7, 0x10,
	0x75, 0xdb, 0xbd, 0x23, 0xf3, 0x12, 0xe5, 0x47, 0x5c, 0xe0, 0xbe, 0xdf, 0xcc, 0xe4, 0x65, 0x28,
	0x14, 0x88, 0xa7, 0x46, 0xa0, 0x46, 0x2b, 0x5e, 0x8b, 0xa8, 0x44, 0x6e, 0xde, 0xd0, 0xd2, 0xcd,
	0xfb, 0xec, 0xb9, 0xa3, 0x5e, 0x50, 0xa8, 0xf8, 0x86, 0x5b, 0x85, 0x84, 0xd6, 0xf2, 0xda, 0x5b,
	0xc2, 0x8d, 0x10, 0x76, 0x36, 0x7c, 0x48, 0xb6, 0x46, 0xf9, 0x06, 0x3b, 0x33, 0xf5, 0xa6, 0xc0,
	0x0c, 0xbc, 0xd1, 0x14, 0x1d, 0x4b, 0xa7, 0xd9, 0xc6, 0x06, 0x18, 0xf2, 0x5d, 0x82, 0xd9, 0xf3,
	0xbd, 0xaa, 0x2b, 0xec, 0x41, 0x38, 0xd9, 0x71, 0x15, 0xee, 0x2e, 0xd0, 0xff, 0x51, 0xbe, 0xfb,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xf6, 0xb4, 0xe1, 0x58, 0x29, 0x00, 0x00,
}
